<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>UnblockNeteaseMusic(三):伸手党使用教程</title>
    <url>/posts/19b4.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>此篇作为伸手党使用教程，即嫌麻烦不想搭建的人（虽然搭建也不麻烦）。<br><a href="/posts/6613.html">UnblockNeteaseMusic(一):Windows搭建教程</a> ，<a href="/posts/21ea.html">UnblockNeteaseMusic(二):Linux搭建教程</a></p>
<h2 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h2><p>PAC地址：<a href="http://47.93.103.89:4567/proxy.pac" target="_blank" rel="noopener">http://47.93.103.89:4567/proxy.pac</a></p>
<p>Windows：<strong>设置 &gt; 工具 &gt; 自定义代理 (客户端内) &gt; HTTP代理 &gt; 服务器: … &gt; 端口: …</strong></p>
<p><img src="%5Cuploads%5CUnblockNeteaseMusic%E4%BC%B8%E6%89%8B%E5%85%9A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-1.png" alt="image-20200624174432447"></p>
<p>Android：<strong>WLAN &gt; 修改网络 &gt; 高级选项 &gt; 代理 &gt; 代理自动配置 &gt; PAC网址: …</strong></p>
<img src="\uploads\UnblockNeteaseMusic伸手党使用教程-2.png" alt="image-20200624174618928" style="zoom:33%;" />

<p>macOS：<strong>系统偏好设置 &gt; 网络 &gt; 高级 &gt; 代理 &gt; 自动代理配置 &gt; URL: …</strong></p>
<p>IOS：<strong>无线局域网 &gt; HTTP 代理 &gt; 配置代理 &gt; 自动 &gt; URL: …</strong></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>unblockneteasemusic</tag>
      </tags>
  </entry>
  <entry>
    <title>UnblockNeteaseMusic(二):Linux搭建教程</title>
    <url>/posts/21ea.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>首先感谢大佬制作维护此项目，通过此项目可实现无限制收听网易云音乐（VIP，无版权都可听），建议观看原文，此片文章只作为博主简单记录。<br>linux搭建分为两种，一种是下载源码自行搭建，二是使用大佬写好的脚本文教进行搭建，话说有大佬写好的脚本还研究源码搭建干嘛，费时费力的。<br>脚本原文地址：<a href="https://xiu2.github.io/SHELL/#/unblock163" target="_blank" rel="noopener">https://xiu2.github.io/SHELL/#/unblock163</a><br>项目地址：<a href="https://github.com/nondanee/UnblockNeteaseMusic" target="_blank" rel="noopener">https://github.com/nondanee/UnblockNeteaseMusic</a></p>
<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>使用 QQ / 虾米 / 百度 / 酷狗 / 酷我 / 咪咕 / JOOX 音源替换变灰歌曲链接 (默认仅启用一、五、六)。<br>为请求增加 <code>X-Real-IP</code> 参数解锁海外限制，支持指定网易云服务器 IP，支持设置上游 HTTP / HTTPS 代理。<br>完整的流量代理功能 (HTTP / HTTPS)，可直接作为系统代理 (同时支持 PAC)。</p>
<h2 id="脚本搭建："><a href="#脚本搭建：" class="headerlink" title="脚本搭建："></a>脚本搭建：</h2><p>注意：因为涉及防火墙端口开关、服务脚本安装，所以脚本需要以 ROOT 用户执行。</p>
<p>如果你不是 ROOT 用户，请执行下面这行代码切换为 ROOT 用户。</p>
<p>如果你已经是 ROOT 用户了，那么请跳过下面这行代码！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure>

<p>执行上面一行代码后会提示你输入当前用户的密码，回车后没有报错即可继续。</p>
<p>如果你要更新脚本，除了使用脚本中的 [0. 更新脚本] 功能以外，还可以再次输入下面这一行代码。</p>
<p>执行下面一行代码下载并运行脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate raw.githubusercontent.com&#x2F;XIU2&#x2F;SHELL&#x2F;master&#x2F;unblock163.sh &amp;&amp; chmod +x unblock163.sh &amp;&amp; bash unblock163.sh</span><br></pre></td></tr></table></figure>

<p>下载运行后会提示你输入数字来选择要做什么。 输入 1 ，就会开始安装了，根据提示依次输入配置信息(或直接回车使用默认配置)即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请输入数字 [0-10]:1</span><br><span class="line">[信息] 开始设置 用户配置...</span><br><span class="line">请输入要使用的代&#123;过&#125;&#123;滤&#125;理端口。 [1-65535]</span><br><span class="line">[注意] 如果你在本地通过 Hosts 方式使用该代&#123;过&#125;&#123;滤&#125;理，那么只能选择 80 端口，其他方式不限制。</span><br><span class="line">(默认: 80):</span><br><span class="line"></span><br><span class="line">------------------------</span><br><span class="line">代&#123;过&#125;&#123;滤&#125;理端口 : 80</span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line">请输入要使用的音源排序。 [qq kuwo kugou baidu xiami migu joox]</span><br><span class="line">[注意] 音源排序指的是，无版权音乐会根据此处顺序优先匹配首位音源，如果匹配到就返回，反之就继续往后匹配。</span><br><span class="line">[注意] 不同音源之间请用空格隔开。</span><br><span class="line">(默认: qq migu kuwo kugou baidu):</span><br><span class="line"></span><br><span class="line">------------------------</span><br><span class="line">音源排序 : qq migu kuwo kugou baidu</span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line">是否启用严格模式？[Y&#x2F;n]</span><br><span class="line">[注意] 启用严格模式后，本代&#123;过&#125;&#123;滤&#125;理仅允许网易云音乐域名访问，即true本地设备只能通过 Host 或 PAC 使用，强烈建议开启，否则所有设备流量都会经过本代&#123;过&#125;&#123;滤&#125;理。</span><br><span class="line">(默认：Y [启用]):</span><br><span class="line"></span><br><span class="line">------------------------</span><br><span class="line">严格模式 : YES</span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line">[信息] 开始安装&#x2F;配置 依赖...</span><br><span class="line">[信息] 开始下载&#x2F;安装...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>如果安装过程没有出错，那么最后就会提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UnblockNeteaseMusic 配置信息：</span><br><span class="line">------------------------</span><br><span class="line">本机地址 : X.X.X.X</span><br><span class="line">代&#123;过&#125;&#123;滤&#125;理端口 : 80</span><br><span class="line">音源排序 : qq migu kuwo kugou baidu</span><br><span class="line">严格模式 : YES</span><br><span class="line"></span><br><span class="line">PAC 地址 : http:&#x2F;&#x2F;X.X.X.X:80&#x2F;proxy.pac</span><br></pre></td></tr></table></figure>

<h2 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h2><p><a href="/posts/19b4.html">UnblockNeteaseMusic(三):伸手党使用教程</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>unblockneteasemusic</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>UnblockNeteaseMusic(一):Windows搭建教程</title>
    <url>/posts/6613.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>首先感谢大佬制作维护此项目，通过此项目可实现无限制收听网易云音乐（VIP，无版权都可听），建议观看原文，此片文章只作为博主简单记录。<br>原文地址：<a href="https://blog.csdn.net/Davie_Liu/article/details/90340317" target="_blank" rel="noopener">https://blog.csdn.net/Davie_Liu/article/details/90340317</a><br>项目地址：<a href="https://github.com/nondanee/UnblockNeteaseMusic" target="_blank" rel="noopener">https://github.com/nondanee/UnblockNeteaseMusic</a></p>
<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>使用 QQ / 虾米 / 百度 / 酷狗 / 酷我 / 咪咕 / JOOX 音源替换变灰歌曲链接 (默认仅启用一、五、六)。<br>为请求增加 <code>X-Real-IP</code> 参数解锁海外限制，支持指定网易云服务器 IP，支持设置上游 HTTP / HTTPS 代理。<br>完整的流量代理功能 (HTTP / HTTPS)，可直接作为系统代理 (同时支持 PAC)。</p>
<h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h2><p>电脑已安装git的可直接执行下面命令。</p>
<figure class="highlight plain"><figcaption><span>clone</span><a href="https://github.com/nondanee/UnblockNeteaseMusic.git```" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="code"><pre><span class="line">未安装git可到**[UnblockNeteaseMusic](https:&#x2F;&#x2F;github.com&#x2F;nondanee&#x2F;UnblockNeteaseMusic)**直接下载zip文件。</span><br><span class="line"></span><br><span class="line">安装Nodejs。</span><br><span class="line">Windows+R快捷键，输入cmd，回车打开DOS命令行窗口，输入“node -h”命令，出现如下情况，即表示已安装！</span><br><span class="line"></span><br><span class="line">![image-20200624162752945](\uploads\UnblockNeteaseMusicWindows搭建教程-1.png)</span><br><span class="line"></span><br><span class="line">如未安装请参考，[Hexo使用记录(一):建站](&#x2F;posts&#x2F;15c8b954.html) 中nodejs安装，安装完成后再次执行“node -h”命令检查安装状态。</span><br><span class="line"></span><br><span class="line">## 配置：</span><br><span class="line"></span><br><span class="line">![image-20200624164310846](\uploads\UnblockNeteaseMusicWindows搭建教程-2.png)</span><br><span class="line"></span><br><span class="line">Windows+R快捷键，输入cmd，切换到你下载的项目文件目录，我这里的地址是&quot;E:\www\UnblockNeteaseMusic&quot;。</span><br></pre></td></tr></table></figure>
<p>C:\Users\谢云虎&gt;E:<br>E:&gt;cd E:\www\UnblockNeteaseMusic</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">我们可以直接命令行“node app.js”，这样系统会自动默认开一个8080端口，但是由于8080端口我还有用，所以我可以加一个参数“-p port”，意思是，你可以指定任何端口，由于你在本机运行程序，需要指定网易云服务器 IP -f xxx.xxx.xxx.xxx，我们通过ping music.163.com 来获取ip地址；</span><br></pre></td></tr></table></figure>
<p>ping music.163.com</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">在获取到ip地址后输入&#96;&#96;&#96;node app.js -p 4567 -f 59.111.181.38&#96;&#96;&#96;回车，此时本地主机已经开启4567端口，并通过该端口代理；</span><br></pre></td></tr></table></figure>
<p>node app.js -p 4567 -f 59.111.181.38</p>
<p>```</p>
<h2 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h2><p>以win10为例，步骤依次为：打开“网络和internet”设置=》代理=》手动设置代理，地址栏中填写’127.0.0.1‘，端口栏中填写你配置的端口，我这里是’4567‘。配置好电脑设置后，打开网易云音乐客户端=》设置=》工具=》自定义代理，选择http代理，服务器栏中填写’127.0.0.1‘，端口栏中填写你配置的端口，我这里是’4567‘，点击确定重启网易云客户端后生效。</p>
<h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>因为每次开机都要运行cmd执行代理命令，所以可以新建一个bat文件，然后放在开机启动目录下，可实现开机即启动代理，bat内容如下：<code>start cmd /k &quot;cd /d E:\www\UnblockNeteaseMusic &amp;&amp; node app.js -p 4567 -f 59.111.181.38 &quot;</code>，注意ip要换成自己ping出来的网易云ip。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>unblockneteasemusic</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>程序设计模式(四):单例模式</title>
    <url>/posts/b979.html</url>
    <content><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>单例模式是指整个应用中某个类只有一个对象实例的设计模式。具体来说，作为对象的创建方式，单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统全局的提供这个实例。它不会创建实例副本，而是会向单例类内部存储的实例返回一个引用。</p>
<h2 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h2><p>在PHP的大多数应用中都会存在大量的数据库操作，如果不用单例模式，那每次都要new操作，但是每次new都会消耗大量的系统资源和内存资源，而且每次打开和关闭数据库都是对数据库的一种极大考验和浪费。所以单例模式经常用在数据库操作类中。</p>
<p>同样，如果系统中需要有一个类来全局控制某些配置信息，那使用单例模式可以很方便的实现。</p>
<h2 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h2><p>优点：</p>
<p>由于单例模式在内存中只有一个实例，减少内存开支，特别是一个对象需要频繁地创建销毁时，而且创建或销毁时性能又无法优化,单例模式就非常明显了。</p>
<p>由于单例模式只生成一个实例，所以，减少系统的性能开销，当一个对象产生需要比较多的资源时，如读取配置，产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。</p>
<p>单例模式可以避免对资源的多重占用，例如一个写文件操作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作。</p>
<p>单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如，可以设计一个单例类，负责所有数据表的映射处理。</p>
<p>缺点：</p>
<p>单例模式一般没有接口，扩展很困难，若要扩展，除了修改代码基本上没有第二种途径可以实现。</p>
<p>单例对象如果持有Context，那么很容易引发内存泄漏，此时需要注意传递给单例对象的Context最好是Application Context。</p>
<h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><p>单例模式的主要特点是“三私一公”：</p>
<p>需要一个保存类的唯一实例的私有静态成员变量</p>
<p>构造函数必须声明为私有的，防止外部程序new一个对象从而失去单例的意义</p>
<p>克隆函数必须声明为私有的，防止对象被克隆</p>
<p>必须提供一个访问这个实例的公共静态方法(通常命名为getInstance)，从而返回唯一实例的一个引用。</p>
<h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//单例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uni</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建静态私有的变量保存该类对象</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> $instance;</span><br><span class="line">        <span class="comment">//参数</span></span><br><span class="line">    <span class="keyword">private</span> $config;</span><br><span class="line">        <span class="comment">//防止直接创建对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($config)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; config = $config;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"我被实例化了"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//防止克隆对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">($config)</span></span>&#123;</span><br><span class="line">                <span class="comment">//判断$instance是否是Uni的对象</span></span><br><span class="line">                <span class="comment">//没有则创建</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">self</span>::$instance <span class="keyword">instanceof</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>::$instance = <span class="keyword">new</span> <span class="keyword">self</span>($config);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$instance;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span> -&gt; config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$db1 = Uni::getInstance(<span class="number">1</span>);</span><br><span class="line">$db1 -&gt; getName();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">$db2 = Uni::getInstance(<span class="number">4</span>);</span><br><span class="line">$db2 -&gt; getName();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>程序设计模式(三):抽象工厂模式</title>
    <url>/posts/2008.html</url>
    <content><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>参考：<a href="https://www.jianshu.com/p/7deb64f902db" target="_blank" rel="noopener">https://www.jianshu.com/p/7deb64f902db</a></p>
<p>抽象工厂模式，即Abstract Factory Pattern，提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类；具体的工厂负责实现具体的产品实例。</p>
<p>抽象工厂模式与工厂方法模式最大的区别：抽象工厂中每个工厂可以创建多种类的产品；而工厂方法每个工厂只能创建一类。</p>
<h2 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h2><p>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等。</p>
<p>系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋。</p>
<p>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构。</p>
<h2 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h2><p>优点：<br>降低耦合：抽象工厂模式将具体产品的创建延迟到具体工厂的子类中，这样将对象的创建封装起来，可以减少客户端与具体产品类之间的依赖，从而使系统耦合度低，这样更有利于后期的维护和扩展；<br>更符合开-闭原则：新增一种产品类时，只需要增加相应的具体产品类和相应的工厂子类即可<br>符合单一职责原则：每个具体工厂类只负责创建对应的产品<br>不使用静态工厂方法，可以形成基于继承的等级结构。</p>
<p>缺点：<br>抽象工厂模式很难支持新种类产品的变化。<br>这是因为抽象工厂接口中已经确定了可以被创建的产品集合，如果需要添加新产品，此时就必须去修改抽象工厂的接口，这样就涉及到抽象工厂类的以及所有子类的改变，这样也就违背了“开发——封闭”原则。</p>
<h2 id="类图："><a href="#类图：" class="headerlink" title="类图："></a>类图：</h2><p><img src="/uploads/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-1" alt="img"></p>
<h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><p><strong>步骤1：</strong> 创建<strong>抽象工厂类</strong>，定义具体工厂的公共接口</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> Product ManufactureContainer();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Product ManufactureMould();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤2：</strong> 创建<strong>抽象产品族类</strong> ，定义具体产品的公共接口；</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProduct</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> void Show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤3：</strong> 创建<strong>抽象产品类</strong> ，定义具体产品的公共接口；</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//容器产品抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerProduct</span> <span class="keyword">extends</span> <span class="title">AbstractProduct</span></span>&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> void Show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模具产品抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MouldProduct</span> <span class="keyword">extends</span> <span class="title">AbstractProduct</span></span>&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> void Show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤4：</strong> 创建<strong>具体产品类</strong>（继承抽象产品类）， 定义生产的具体产品；</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//容器产品A类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContainerProductA</span> <span class="keyword">extends</span> <span class="title">ContainerProduct</span></span>&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> void Show() &#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了容器产品A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器产品B类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContainerProductB</span> <span class="keyword">extends</span> <span class="title">ContainerProduct</span></span>&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> void Show() &#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了容器产品B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模具产品A类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MouldProductA</span> <span class="keyword">extends</span> <span class="title">MouldProduct</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> void Show() &#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了模具产品A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模具产品B类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MouldProductB</span> <span class="keyword">extends</span> <span class="title">MouldProduct</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> void Show() &#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了模具产品B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤5：</strong>创建<strong>具体工厂类</strong>（继承抽象工厂类），定义创建对应具体产品实例的方法；</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A厂 - 生产模具+容器产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryA</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Product ManufactureContainer() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ContainerProductA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Product ManufactureMould() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MouldProductA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B厂 - 生产模具+容器产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryB</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Product ManufactureContainer() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ContainerProductB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Product ManufactureMould() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MouldProductB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤6：</strong>客户端通过实例化具体的工厂类，并调用其创建不同目标产品的方法创建不同具体产品类的实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生产工作流程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryPattern</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(String[] args)&#123;</span><br><span class="line">        FactoryA mFactoryA = <span class="keyword">new</span> FactoryA();</span><br><span class="line">        FactoryB mFactoryB = <span class="keyword">new</span> FactoryB();</span><br><span class="line">        <span class="comment">//A厂当地客户需要容器产品A</span></span><br><span class="line">        mFactoryA.ManufactureContainer().Show();</span><br><span class="line">        <span class="comment">//A厂当地客户需要模具产品A</span></span><br><span class="line">        mFactoryA.ManufactureMould().Show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//B厂当地客户需要容器产品B</span></span><br><span class="line">        mFactoryB.ManufactureContainer().Show();</span><br><span class="line">        <span class="comment">//B厂当地客户需要模具产品B</span></span><br><span class="line">        mFactoryB.ManufactureMould().Show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-PSR规范</title>
    <url>/posts/9ad4.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>转自 <a href="https://www.jianshu.com/p/79e56c5adf5e" target="_blank" rel="noopener">https://www.jianshu.com/p/79e56c5adf5e</a></p>
<h2 id="PSR规范："><a href="#PSR规范：" class="headerlink" title="PSR规范："></a>PSR规范：</h2><p>PSR 是 PHP Standard Recommendations 的简写，由 <a href="https://github.com/php-fig" target="_blank" rel="noopener">PHP FIG</a> 组织制定的 PHP 规范，是 PHP 开发的实践标准。</p>
<p><a href="https://github.com/php-fig" target="_blank" rel="noopener">PHP FIG</a>，FIG 是 Framework Interoperability Group（框架可互用性小组）的缩写，由几位开源框架的开发者成立于 2009 年，从那开始也选取了很多其他成员进来（包括但不限于 <a href="http://laravel.com/" target="_blank" rel="noopener">Laravel</a>, <a href="https://www.joomla.org/" target="_blank" rel="noopener">Joomla</a>, <a href="https://www.drupal.org/" target="_blank" rel="noopener">Drupal</a>, <a href="https://getcomposer.org/" target="_blank" rel="noopener">Composer</a>, <a href="https://phalconphp.com/en/" target="_blank" rel="noopener">Phalcon</a>, <a href="http://www.slimframework.com/" target="_blank" rel="noopener">Slim</a>, <a href="http://symfony.com/" target="_blank" rel="noopener">Symfony</a>, <a href="http://framework.zend.com/" target="_blank" rel="noopener">Zend Framework</a> 等），虽然不是「官方」组织，但也代表了大部分的 PHP 社区。</p>
<p>项目的目的在于：通过框架作者或者框架的代表之间讨论，以最低程度的限制，制定一个协作标准，各个框架遵循统一的编码规范，避免各家自行发展的风格阻碍了 PHP 的发展，解决这个程序设计师由来已久的困扰。</p>
<p>目前已表决通过了 6 套标准，已经得到大部分 PHP 框架的支持和认可。</p>
<p><img src="/uploads/PHP-PSR%E8%A7%84%E8%8C%83-1.webp" alt="img"></p>
<p><img src="/uploads/PHP-PSR%E8%A7%84%E8%8C%83-2.webp" alt="img"></p>
<p><img src="/uploads/PHP-PSR%E8%A7%84%E8%8C%83-3.webp" alt="img"></p>
<h4 id="PSR-0（自动加载规范）"><a href="#PSR-0（自动加载规范）" class="headerlink" title="==PSR-0（自动加载规范）=="></a>==<strong>PSR-0（自动加载规范）</strong>==</h4><p>PSR-0(Autoloading Standard)类自动加载规范，该规范现已废弃（Deprecated），它将由PSR-4替代。</p>
<p>1.一个完全合格的命名空间和类名必须遵循以下结构 “\VendorName\Namespace\ClassName”</p>
<p>2.每个命名空间必须有顶级的命名空间 “VendorName”</p>
<p>3.每个命名空间可以有任意多个子命名空间</p>
<p>4.每个命名空间在被文件系统加载时必须被转换为操作系统路径分隔符 (DIRECTORY_SEPARATOR)</p>
<p>5.每个”_”字符在”类名”中被转换为DIRECTORY_SEPARATOR。而在 PSR-4 中使用下划线没有任何特殊含义</p>
<p>6.符合命名标准的命名空间和类名必须以”.php”结尾来加载文件</p>
<p>7.命名空间和类名可以由大小写字母组成，但必须对大小写敏感以保证多系统兼容性</p>
<h4 id="PSR-1（基本代码规范）"><a href="#PSR-1（基本代码规范）" class="headerlink" title="==PSR-1（基本代码规范）=="></a>==<strong>PSR-1（基本代码规范）</strong>==</h4><p>PSR-1(Basic Coding Standard)基本代码规范，用以确保共享的PHP代码间具有较高程度的技术互通性。</p>
<p>1.PHP代码源文件必须以&lt;?php 或 &lt;?= 标签开始</p>
<p>2.PHP代码源文件必须使用不带 BOM 的 UTF-8 编码</p>
<p>3.一个源文件建议只用作定义类、函数、常量等声明，或者其他产生从属效应的操作（如：输出信息，修改配置文件等）</p>
<p>4.命名空间以及类必须符合 PSR 的自动加载规范：PSR-0 或 PSR-4</p>
<p>5.类的命名必须遵循 StudlyCaps 大写开头的驼峰式命名规范</p>
<p>6.类中的常量所有字母都必须大写，单词间用下划线分隔</p>
<p>7.方法名必须符合 camelCase 式的小写开头驼峰式命名规范</p>
<p>* BOM(byte order mark)是 Unicode 标准的一部分，通常用于标记纯文本字节序(byte order)，使得文本处理程序能够识别读入的文件使用的 Unicode 编码（UTF-8、UTF-16、UTF-32）。</p>
<p>* 从属效应是指仅仅通过包含文件，不直接声明类、函数和常量而执行的逻辑操作。一份PHP源文件应该要么就只包含不产生从属效应的定义操作，要么就包含只会产生从属效应的逻辑操作，切勿同时包含两者。</p>
<h4 id="PSR-2（代码风格规范）"><a href="#PSR-2（代码风格规范）" class="headerlink" title="==PSR-2（代码风格规范）=="></a>==<strong>PSR-2（代码风格规范）</strong>==</h4><p> PSR-2(Coding Style Guide)代码风格规范，通过制定一系列规范化PHP代码的规则，以减少因代作者码风格不同而造成的阅读不便。</p>
<p>1.代码必须遵循 PSR-1 中的编码规范</p>
<p>2.代码必须使用4个空格来进行缩进，而非制表符(TAB)</p>
<p>3.建议每行代码字符数保持在80个以内，理论上不可多于120个，但不做硬性限制</p>
<p>4.每个 namespace 命名空间语句和 use 声明语句块后面必须插入一个空白行</p>
<p>5.类的左花括号 “{“ 必须写在声明后自成一行，右花括号 “}” 也必须在类主体下自成一行</p>
<p>6.方法的左花括号 “{“ 必须放在声明后自成一行，右花括号 “}” 也必须于主体下自成一行</p>
<p>7.类的属性和方法必须添加访问修饰符（private、protected、public），abstract 以及 final 必须声明在访问修饰符之前，而 static 必须声明在访问修饰符之后（例：final public static）</p>
<p>8.在控制结构关键字的后面必须有一个空格，而调用方法或函数时一定不能有（控制结构：if-else、switch-case、try-catch、while、foreach …）</p>
<p>9.控制结构的左花括号 “{“ 必须跟其处于同一行，右花括号 “}” 必须在控制结构主体之后自成一行</p>
<p>10.控制结构的开始左括号之后，和结束右括号之前都不可以有空格</p>
<h4 id="PSR-3（日志接口规范）"><a href="#PSR-3（日志接口规范）" class="headerlink" title="==PSR-3（日志接口规范）=="></a>==<strong>PSR-3（日志接口规范）</strong>==</h4><p>PSR-3(Logger Interface)日志接口规范，主要目的是为了让日志类库通过接收一个 LoggerInterface 对象来记录日志信息。</p>
<p>1.LoggerInterface 接口对外定义了八个方法，分别用来记录 RFC 5424 中定义的八个等级的日志：debug、info、notice、warning、error、critical、alert、emergency</p>
<p>2.第九个方法 log()，第一个参数为记录等级。可使用一个预先定义的等级常量作为参数来调用此方法，必须与直接调用以上八个方法具有相同的效果。如果传入的等级常量没有预先定义，则必须抛出 psr\Log\InvalidArgumentException 类型的异常。不推荐使用自定义的日志等级，除非你非常确定当前类库对其有所支持。</p>
<h4 id="PSR-4（自动加载新规）"><a href="#PSR-4（自动加载新规）" class="headerlink" title="==PSR-4（自动加载新规）=="></a>==<strong>PSR-4（自动加载新规）</strong>==</h4><p>PSR-4(Improved Autoloading)本规范是关于自动载入对应类的相关规范，是 PSR-0 自动加载规范的补充。</p>
<p>1.此处的“类”是一个泛称，它包含类、接口、traits 以及其他类似的结构</p>
<p>2.完全限定类名需要遵循以下结构：<strong>&lt;命名空间&gt;(&lt;子命名空间&gt;)*&lt;类名&gt;</strong></p>
<p>　　* 完全限定类名必须要有一个顶级命名空间，被称为 “vendor namespace”；</p>
<p>　　* 完全限定类名可以有一个或多个子命名空间；</p>
<p>　　* 完全限定类名必须有一个终止类名；</p>
<p>　　* 完全限定类名中任意一部分中的下划线都没有特殊含义；</p>
<p>　　* 完全限定类名可以由任意大小写字母组成；</p>
<p>　  * 完全限定类名必须以大小写敏感的方式引用；</p>
<p>3.当根据完整的类名载入相应的文件时：</p>
<p>　　* 完全限定类名中，连续的一个或几个子命名空间构成的命名空间前缀（不包括顶级命名空间的分隔符），至少对应着至少一个基础目录；</p>
<p>​    * 紧接命名空间前缀后的子命名空间<strong>必须</strong>与相应的”文件基目录“相匹配，其中的命名空间分隔符将作为目录分隔符；</p>
<p>　　* 终止类名对应一个以 .php 结尾的文件，文件名必须和终止类名大小写匹配；</p>
<p>4.自动加载器（autoloader）的实现不能抛出异常，不可引发任一级别错误，也不应该有返回值</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>程序设计模式(二):简单工厂模式</title>
    <url>/posts/979a.html</url>
    <content><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p> 简单工厂模式（Simple Factory）提供一个创建对象实例的功能，而无需关系其具体实现，被创建实例的类型可以是接口、抽象类，也可以是具体的类。</p>
<h2 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h2><p>如果想完全封装隔离具体实现，让外部只能通过接口来操作封装体，那么可以选择简单工厂，让客户端通过工厂来获取相应的接口，而无须关心具体的实现。</p>
<p>如果想要把对外创建对象的职责集中管理和控制，可以选择简单工厂。</p>
<h2 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h2><p>优点：<br>帮助封装：简单工厂虽然简单，但是非常友好地帮助我们实现了组件的封装，然后让组件外部能真正面向接口编程。<br>解耦：通过简单工厂，实现了客户端和具体实现类的解耦。</p>
<p>缺点：<br>可能增加客户端的复杂度<br>不方便扩展子工厂</p>
<h2 id="类图："><a href="#类图：" class="headerlink" title="类图："></a>类图：</h2><h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><p>IShape.php (接口,限定子类实现方法)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test</span>;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IShape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Circle.php(具体实现类(圆形))</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">IShape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'画一个圆形'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Square.php(具体实现类(正方形))</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">IShape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'画一个正方形'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Factory.php(简单工厂类)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> CIRCLE = <span class="string">'circle'</span>;</span><br><span class="line">    <span class="keyword">const</span> SQUARE = <span class="string">'square'</span>;</span><br><span class="line">    <span class="keyword">private</span> $shape;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($shape)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;shape = $shape;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getShape</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">$this</span>-&gt;shape)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">self</span>::CIRCLE:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">self</span>::SQUARE:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端调用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">'BASEDIR'</span>,<span class="keyword">__DIR__</span>);</span><br><span class="line"><span class="keyword">include</span> BASEDIR.<span class="string">'/Test/Loader.php'</span>;</span><br><span class="line">spl_autoload_register(<span class="string">'\\Test\\Loader::autoload'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Test</span>\<span class="title">Factory</span>;</span><br><span class="line">$shape = (<span class="keyword">new</span> Factory(Factory::CIRCLE))-&gt;getShape();</span><br><span class="line">$sting = $shape-&gt;draw();</span><br><span class="line"><span class="keyword">echo</span> $sting;</span><br></pre></td></tr></table></figure>

<h2 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h2><p>现在又要加一个画长方形的新需求该怎么办？</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>程序设计模式(一):基础信息</title>
    <url>/posts/fc3f.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>在面试中经常会被问道你经常用的设计模式是什么，我回答的也就是单例，工厂，观察者等等模式，而实际上因为接触的工作原因很少会用到这种设计模式，当初学过的东西现在也已经模糊不清，今天就在这里结合<a href="https://learnku.com/docs/php-design-patterns/2018" target="_blank" rel="noopener">参考文档一</a>，<a href="https://www.runoob.com/design-pattern/design-pattern-intro.html" target="_blank" rel="noopener">参考文档二</a>整理、复习、学习一下程序的设计模式。</p>
<p>在后续学习之前先有一个符合SPR-0的自动载入框架，还需要了解UML类图。</p>
<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
<p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p>
<h2 id="设计模式类型："><a href="#设计模式类型：" class="headerlink" title="设计模式类型："></a>设计模式类型：</h2><p>目前网络上基本上总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，我们还会讨论另一类设计模式：J2EE 设计模式。</p>
<table>
<thead>
<tr>
<th align="left">模式 &amp; 描述</th>
<th align="left">包括</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>创建型模式</strong> <br />这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</td>
<td align="left">工厂模式（Factory Pattern）<br />抽象工厂模式（Abstract Factory Pattern）<br />单例模式（Singleton Pattern）<br />建造者模式（Builder Pattern）<br />原型模式（Prototype Pattern）</td>
</tr>
<tr>
<td align="left"><strong>结构型模式</strong> <br />这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</td>
<td align="left">适配器模式（Adapter Pattern）<br />桥接模式（Bridge Pattern）<br />过滤器模式（Filter、Criteria Pattern）<br />组合模式（Composite Pattern）<br />装饰器模式（Decorator Pattern）<br />外观模式（Facade Pattern）<br />享元模式（Flyweight Pattern）<br />代理模式（Proxy Pattern）</td>
</tr>
<tr>
<td align="left"><strong>行为型模式</strong> <br />这些设计模式特别关注对象之间的通信。</td>
<td align="left">责任链模式（Chain of Responsibility Pattern）<br />命令模式（Command Pattern）<br />解释器模式（Interpreter Pattern）<br />迭代器模式（Iterator Pattern）<br />中介者模式（Mediator Pattern）<br />备忘录模式（Memento Pattern）<br />观察者模式（Observer Pattern）<br />状态模式（State Pattern）<br />空对象模式（Null Object Pattern）<br />策略模式（Strategy Pattern）<br />模板模式（Template Pattern）<br />访问者模式（Visitor Pattern）</td>
</tr>
<tr>
<td align="left"><strong>J2EE 模式</strong> <br />这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。</td>
<td align="left">MVC 模式（MVC Pattern）<br />业务代表模式（Business Delegate Pattern）<br />组合实体模式（Composite Entity Pattern）<br />数据访问对象模式（Data Access Object Pattern）<br />前端控制器模式（Front Controller Pattern）<br />拦截过滤器模式（Intercepting Filter Pattern）<br />服务定位器模式（Service Locator Pattern）<br />传输对象模式（Transfer Object Pattern）</td>
</tr>
</tbody></table>
<h2 id="设计模式的六大原则："><a href="#设计模式的六大原则：" class="headerlink" title="设计模式的六大原则："></a>设计模式的六大原则：</h2><p><strong>1、开闭原则（Open Close Principle）</strong></p>
<p>开闭原则的意思是：<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>
<p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p>
<p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>
<p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p>
<p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>
<p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p>
<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>
<p><strong>5、迪米特法则，又称最少知道原则（Demeter Principle）</strong></p>
<p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
<p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p>
<p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows常用操作</title>
    <url>/posts/b31f.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>此文仅针对博主为了日后的方便而记录的常用操作，如有需要可作为参考。</p>
<h2 id="微信多开："><a href="#微信多开：" class="headerlink" title="微信多开："></a>微信多开：</h2><p>新建bat文件，写入下面内容，路径替换为自己相应的微信文件路径后执行即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">start  &quot;E:\Program Files\Tencent\WeChat\&quot; WeChat.exe</span><br><span class="line"></span><br><span class="line">start  &quot;E:\Program Files\Tencent\WeChat\&quot; WeChat.exe</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<h2 id="Beyond-Compare-4-密钥过期："><a href="#Beyond-Compare-4-密钥过期：" class="headerlink" title="Beyond Compare 4 密钥过期："></a>Beyond Compare 4 密钥过期：</h2><p>删除下面文件夹中得文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\谢云虎\AppData\Roaming\Scooter Software\Beyond Compare 4</span><br></pre></td></tr></table></figure>

<h2 id="Windows永久激活："><a href="#Windows永久激活：" class="headerlink" title="Windows永久激活："></a>Windows永久激活：</h2><p>下载数字权利激活工具：<br>百度网盘： <a href="https://pan.baidu.com/s/1w3xRuH0xvbir5Xvzzl_vcQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1w3xRuH0xvbir5Xvzzl_vcQ</a> 提取码: 375i<br>蓝奏云：<a href="https://www.lanzous.com/i31wlpc" target="_blank" rel="noopener">https://www.lanzous.com/i31wlpc</a><br>激活后win+r执行<code>slmgr.vbs -xpr</code>查看状态。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Php常见排序算法</title>
    <url>/posts/954f.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>所谓排序，就是对一组数据，按照某个顺序排列的过程，这里列出冒泡，快速，简单选择，堆，直接插入，希尔，归并排序排序方法，不要死记硬背，没用，理解就好。</p>
<p>内置排序函数：</p>
<ul>
<li>sort() - 以升序对数组排序</li>
<li>rsort() - 以降序对数组排序</li>
<li>asort() - 根据值，以升序对关联数组进行排序</li>
<li>ksort() - 根据键，以升序对关联数组进行排序</li>
<li>arsort() - 根据值，以降序对关联数组进行排序</li>
<li>krsort() - 根据键，以降序对关联数组进行排序</li>
</ul>
<h2 id="冒泡排序（Bubble-sort）："><a href="#冒泡排序（Bubble-sort）：" class="headerlink" title="冒泡排序（Bubble sort）："></a>冒泡排序（Bubble sort）：</h2><p>基本思想：将一组数据看作一排竖着的气泡，然后让最后一个数与倒数第二个数进行比较，大的就往前移。然后用相同的方法，将倒数第二个数与倒数第三个进行比较，大的往前移，依次类推，最后本轮循环结束后，第一个元素就是最大的了，然后继续循环，得到第二个，第三个……</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble_sort</span><span class="params">($array)</span></span>&#123;</span><br><span class="line">    <span class="comment">//计算数组长度</span></span><br><span class="line">    $len=count($array);</span><br><span class="line">    <span class="comment">// 判断是否需要运行，因下面已拿出一个中间值，这里&lt;=1</span></span><br><span class="line">    <span class="keyword">if</span> ($len &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> $array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一层循环，把$i看为$array的键名，因为键名是从0开始的，所以我们需要$len-1</span></span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$len<span class="number">-1</span>;$i++)&#123;</span><br><span class="line">        <span class="comment">//第二层循环，把$j看为$array的键名，因为键名是从0开始的，所以我们需要$len-1</span></span><br><span class="line">        <span class="keyword">for</span>($j=<span class="number">0</span>;$j&lt;$len<span class="number">-1</span>;$j++)&#123;</span><br><span class="line">            <span class="comment">//$k是$array数组中键名为$j后的一个键名，也就是相邻的两个键名</span></span><br><span class="line">            $k=$j+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//比较两数，如果前一个数比后一个大，则交换两个数的顺序，如果不大于，就进行下一轮比较</span></span><br><span class="line">            <span class="keyword">if</span>($array[$j]&gt;$array[$k])&#123;</span><br><span class="line">                <span class="comment">//交换开始</span></span><br><span class="line">                $t=$array[$j]; <span class="comment">//把$array中键名为$j的值临时存到一个变量里面</span></span><br><span class="line">                $array[$j]=$array[$k]; <span class="comment">//此刻$array中键名为$j的值就要变更为比他小的$k的值</span></span><br><span class="line">                $array[$k]=$t;	<span class="comment">//再把刚刚保存的$j的值存到数组$k的位置</span></span><br><span class="line">                <span class="comment">//交换结束，进行下一轮比较</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ($array);</span><br><span class="line">&#125;</span><br><span class="line">$array=<span class="keyword">array</span>(<span class="number">5</span>,<span class="number">45</span>,<span class="number">22</span>,<span class="number">11</span>,<span class="number">32</span>,<span class="number">28</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">17</span>,<span class="number">21</span>,<span class="number">92</span>);</span><br><span class="line">print_r(bubble_sort($array));</span><br></pre></td></tr></table></figure>

<h2 id="快速排序（Quick-sort）："><a href="#快速排序（Quick-sort）：" class="headerlink" title="快速排序（Quick sort）："></a>快速排序（Quick sort）：</h2><p>基本思想：假设当前需要从小到大进行排序，快速排序的核心思路是，从当前数组中，找到一个元素作为基准比较值（key），分别从两个方向进行比较。从后往前找，比key小元素放在数组前面。然后从前往后找，比key大的元素放在数组后面。最终两个方向交汇到中间，让key交换到数组的中间位置。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span><span class="params">($array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//计算数组长度</span></span><br><span class="line">    $len=count($array);</span><br><span class="line">    <span class="comment">// 判断是否需要运行，因下面已拿出一个中间值，这里&lt;=1</span></span><br><span class="line">    <span class="keyword">if</span> ($len &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> $array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把数组中第一个值作为中间值</span></span><br><span class="line">    $middle = $array[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 定义接收小于中间值数组变量</span></span><br><span class="line">    $left = <span class="keyword">array</span>();</span><br><span class="line">    <span class="comment">// 定义接收大于中间值数组变量</span></span><br><span class="line">    $right = <span class="keyword">array</span>();</span><br><span class="line">    <span class="comment">// 循环比较，因为数组中的第一个值是中间值，所以从第二个值开始循环</span></span><br><span class="line">    <span class="keyword">for</span> ($i=<span class="number">1</span>; $i &lt; $len; $i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($middle &lt; $array[$i]) &#123;</span><br><span class="line">            <span class="comment">// 大于中间值</span></span><br><span class="line">            $right[] = $array[$i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 小于或等于中间值</span></span><br><span class="line">            $left[] = $array[$i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归排序划分好的2边</span></span><br><span class="line">    $left = quick_sort($left);</span><br><span class="line">    $right = quick_sort($right);</span><br><span class="line">    <span class="comment">// 合并排序后的数据，别忘了合并中间值</span></span><br><span class="line">    <span class="keyword">return</span> array_merge($left, <span class="keyword">array</span>($middle), $right);</span><br><span class="line">&#125;</span><br><span class="line">$array=<span class="keyword">array</span>(<span class="number">5</span>,<span class="number">45</span>,<span class="number">22</span>,<span class="number">11</span>,<span class="number">32</span>,<span class="number">28</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">17</span>,<span class="number">21</span>,<span class="number">92</span>);</span><br><span class="line">print_r(quick_sort($array));</span><br></pre></td></tr></table></figure>

<h2 id="PHP简单选择排序（Simple-Selection-Sort）："><a href="#PHP简单选择排序（Simple-Selection-Sort）：" class="headerlink" title="PHP简单选择排序（Simple Selection Sort）："></a>PHP简单选择排序（Simple Selection Sort）：</h2><p>基本思想：通过 n - i 次关键字间的比较，从 n - i + 1 个记录中选出关键字最小的记录，并和第 i （1 &lt;= i &lt;= n） 个记录交换，执行n-1趟 后就完成了记录序列的排序。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单选择排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelectSort</span><span class="params">($array)</span></span>&#123;</span><br><span class="line">    <span class="comment">//计算数组长度</span></span><br><span class="line">    $len=count($array);</span><br><span class="line">    <span class="comment">// 判断是否需要运行，因下面已拿出一个中间值，这里&lt;=1</span></span><br><span class="line">    <span class="keyword">if</span> ($len &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> $array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一层循环，把$i看为$array的键名，因为键名是从0开始的，所以我们需要$len-1</span></span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>;$i &lt; $len - <span class="number">1</span>;$i ++)&#123;</span><br><span class="line">        <span class="comment">//记录第$i个元素后的所有元素最小值下标</span></span><br><span class="line">        $min = $i;</span><br><span class="line">        <span class="comment">//第二层循环</span></span><br><span class="line">        <span class="keyword">for</span>($j = $i + <span class="number">1</span>;$j &lt; $len;$j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>($array[$j] &lt; $array[$min])&#123;</span><br><span class="line">                $min = $j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>($min != $i)&#123;</span><br><span class="line">            <span class="comment">//交换开始</span></span><br><span class="line">            $temp = $array[$min];</span><br><span class="line">            $array[$min] = $array[$i];</span><br><span class="line">            $array[$i] = $temp;</span><br><span class="line">            <span class="comment">//交换结束，进行下一轮比较</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $array;</span><br><span class="line">&#125;</span><br><span class="line">$array=<span class="keyword">array</span>(<span class="number">5</span>,<span class="number">45</span>,<span class="number">22</span>,<span class="number">11</span>,<span class="number">32</span>,<span class="number">28</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">17</span>,<span class="number">21</span>,<span class="number">92</span>);</span><br><span class="line">print_r(SelectSort($array));</span><br></pre></td></tr></table></figure>

<h2 id="堆排序（Heap-Sort）："><a href="#堆排序（Heap-Sort）：" class="headerlink" title="堆排序（Heap Sort）："></a>堆排序（Heap Sort）：</h2><p>基本思想：堆排序就对简单选择排序的改进，将待排序的序列构造成一个大根堆。此时，整个序列的最大值就是堆顶的根节点。将它移走（其实就是将其与堆数组的末尾元素交换，此时末尾元素就是最大值），然后将剩余的 n - 1 个序列重新构造成一个堆，这样就会得到 n 个元素中的次小的值。如此反复执行，便能得到一个有序序列了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HeapSort</span><span class="params">(array &amp;$arr)</span></span>&#123;</span><br><span class="line">    $count = count($arr);</span><br><span class="line">    <span class="comment">//先将数组构造成大根堆（由于是完全二叉树，所以这里用floor($count/2)-1，下标小于或等于这数的节点都是有孩子的节点)</span></span><br><span class="line">    <span class="keyword">for</span>($i = floor($count / <span class="number">2</span>) - <span class="number">1</span>;$i &gt;= <span class="number">0</span>;$i --)&#123;</span><br><span class="line">        HeapAdjust($arr,$i,$count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>($i = $count - <span class="number">1</span>;$i &gt;= <span class="number">0</span>;$i --)&#123;</span><br><span class="line">        <span class="comment">//将堆顶元素与最后一个元素交换，获取到最大元素（交换后的最后一个元素），将最大元素放到数组末尾</span></span><br><span class="line">        $temp = $arr[<span class="number">0</span>];</span><br><span class="line">        $arr[<span class="number">0</span>] = $arr[$i];</span><br><span class="line">        $arr[$i] = $temp;</span><br><span class="line">        <span class="comment">//经过交换，将最后一个元素（最大元素）脱离大根堆，并将未经排序的新树($arr[0...$i-1])重新调整为大根堆</span></span><br><span class="line">        HeapAdjust($arr,<span class="number">0</span>,$i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调整 $arr[$start]的关键字，使$arr[$start]、$arr[$start+1]、、、$arr[$end]成为一个大根堆（根节点最大的完全二叉树）</span></span><br><span class="line"><span class="comment">//注意这里节点 s 的左右孩子是 2*s + 1 和 2*s+2 （数组开始下标为 0 时）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HeapAdjust</span><span class="params">(array &amp;$arr,$start,$end)</span></span>&#123;</span><br><span class="line">    $temp = $arr[$start];</span><br><span class="line">    <span class="comment">//沿关键字较大的孩子节点向下筛选</span></span><br><span class="line">    <span class="comment">//左右孩子计算（我这里数组开始下标识 0）</span></span><br><span class="line">    <span class="comment">//左孩子2 * $start + 1，右孩子2 * $start + 2</span></span><br><span class="line">    <span class="keyword">for</span>($j = <span class="number">2</span> * $start + <span class="number">1</span>;$j &lt;= $end;$j = <span class="number">2</span> * $j + <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>($j != $end &amp;&amp; $arr[$j] &lt; $arr[$j + <span class="number">1</span>])&#123;</span><br><span class="line">            $j ++; <span class="comment">//转化为右孩子</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>($temp &gt;= $arr[$j])&#123;</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">//已经满足大根堆</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将根节点设置为子节点的较大值</span></span><br><span class="line">        $arr[$start] = $arr[$j];</span><br><span class="line">        <span class="comment">//继续往下</span></span><br><span class="line">        $start = $j;</span><br><span class="line">    &#125;</span><br><span class="line">    $arr[$start] = $temp;</span><br><span class="line">&#125;</span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>);</span><br><span class="line">HeapSort($arr);</span><br><span class="line">var_dump($arr);</span><br></pre></td></tr></table></figure>



<h2 id="直接插入排序-Straight-Insertion-Sort-："><a href="#直接插入排序-Straight-Insertion-Sort-：" class="headerlink" title="直接插入排序(Straight Insertion Sort)："></a>直接插入排序(Straight Insertion Sort)：</h2><p>基本思想：直接插入排序的基本思想是 ： 每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序。第一趟比较前两个数，然后把第二个数按大小插入到有序表中； 第二趟把第三个数据与前两个数从后向前扫描，把第三个数按大小插入到有序表中；依次进行下去，进行了(n-1)趟扫描以后就完成了整个排序过程。直接插入排序是由两层嵌套循环组成的。外层循环标识并决定待比较的数值。内层循环为待比较数值确定其最终位置。直接插入排序是将待比较的数值与它的前一个数值进行比较，所以外层循环是从第二个数值开始的。当前一数值比待比较数值大的情况下继续循环比较，直到找到比待比较数值小的并将待比较数值置入其后一位置，结束该次循环。插入排序的基本方法是：每步将一个待排序的记录按其关键字的大小插到前面已经排序的序列中的适当位置，直到全部记录插入完毕为止。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接插入排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InsertSort</span><span class="params">(array &amp;$arr)</span></span>&#123;</span><br><span class="line">    $count = count($arr);</span><br><span class="line">    <span class="comment">//数组中第一个元素作为一个已经存在的有序表</span></span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">1</span>;$i &lt; $count;$i ++)&#123;</span><br><span class="line">        $temp = $arr[$i];   <span class="comment">//设置哨兵</span></span><br><span class="line">        <span class="keyword">for</span>($j = $i - <span class="number">1</span>;$j &gt;= <span class="number">0</span> &amp;&amp; $arr[$j] &gt; $temp;$j --)&#123;</span><br><span class="line">            $arr[$j + <span class="number">1</span>] = $arr[$j];    <span class="comment">//记录后移</span></span><br><span class="line">        &#125;</span><br><span class="line">        $arr[$j + <span class="number">1</span>] = $temp;   <span class="comment">//插入到正确的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">55</span>,<span class="number">04</span>);</span><br><span class="line">InsertSort($arr);</span><br><span class="line">var_dump($arr);</span><br></pre></td></tr></table></figure>



<h2 id="希尔排序（Shell-Sort）："><a href="#希尔排序（Shell-Sort）：" class="headerlink" title="希尔排序（Shell Sort）："></a>希尔排序（Shell Sort）：</h2><p>基本思想：希尔排序是指记录按下标的一定增量分组，对每一组使用 直接插入排序 ，随着增量逐渐减少，每组包含的关键字越来越多，当增量减少至 1 时，整个序列恰好被分成一组，算法便终止。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 希尔排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ShellSort</span><span class="params">(array &amp;$arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $count = count($arr);</span><br><span class="line">    $inc = $count;    <span class="comment">//增量</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">//计算增量</span></span><br><span class="line">        <span class="comment">//$inc = floor($inc / 3) + 1;</span></span><br><span class="line">        $inc = ceil($inc / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> ($i = $inc; $i &lt; $count; $i++) &#123;</span><br><span class="line">            $temp = $arr[$i];    <span class="comment">//设置哨兵</span></span><br><span class="line">            <span class="comment">//需将$temp插入有序增量子表</span></span><br><span class="line">            <span class="keyword">for</span> ($j = $i - $inc; $j &gt;= <span class="number">0</span> &amp;&amp; $arr[$j + $inc] &lt; $arr[$j]; $j -= $inc) &#123;</span><br><span class="line">                $arr[$j + $inc] = $arr[$j]; <span class="comment">//记录后移</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//插入</span></span><br><span class="line">            $arr[$j + $inc] = $temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增量为1时停止循环</span></span><br><span class="line">    &#125; <span class="keyword">while</span> ($inc &gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">55</span>,<span class="number">04</span>);</span><br><span class="line">ShellSort($arr);</span><br><span class="line">var_dump($arr);</span><br></pre></td></tr></table></figure>



<h2 id="归并排序（Merging-Sort）："><a href="#归并排序（Merging-Sort）：" class="headerlink" title="归并排序（Merging Sort）："></a>归并排序（Merging Sort）：</h2><p>基本思想：归并排序：就是利用归并（合并）的思想实现的排序方法。它的原理是假设初始序列含有 n 个元素，则可以看成是 n 个有序的子序列，每个子序列的长度为 1，然后两两归并，得到 ⌈ n / 2⌉ （⌈ x ⌉ 表示不小于 x 的最小整数）个长度为 2 或 1 的有序序列；再两两归并，······，如此重复，直至得到一个长度为 n 的有序序列为止，这种排序方法就成为 2 路归并排序。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//归并算法总函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MergeSort</span><span class="params">(array &amp;$arr)</span></span>&#123;</span><br><span class="line">    $start = <span class="number">0</span>;</span><br><span class="line">    $end = count($arr) - <span class="number">1</span>;</span><br><span class="line">    MSort($arr,$start,$end);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MSort</span><span class="params">(array &amp;$arr,$start,$end)</span></span>&#123;</span><br><span class="line">    <span class="comment">//当子序列长度为1时，$start == $end，不用再分组</span></span><br><span class="line">    <span class="keyword">if</span>($start &lt; $end)&#123;</span><br><span class="line">        $mid = floor(($start + $end) / <span class="number">2</span>);	<span class="comment">//将 $arr 平分为 $arr[$start - $mid] 和 $arr[$mid+1 - $end]</span></span><br><span class="line">        MSort($arr,$start,$mid);			<span class="comment">//将 $arr[$start - $mid] 归并为有序的$arr[$start - $mid]</span></span><br><span class="line">        MSort($arr,$mid + <span class="number">1</span>,$end);			<span class="comment">//将 $arr[$mid+1 - $end] 归并为有序的 $arr[$mid+1 - $end]</span></span><br><span class="line">        Merge($arr,$start,$mid,$end);       <span class="comment">//将$arr[$start - $mid]部分和$arr[$mid+1 - $end]部分合并起来成为有序的$arr[$start - $end]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//归并操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Merge</span><span class="params">(array &amp;$arr,$start,$mid,$end)</span></span>&#123;</span><br><span class="line">    $i = $start;</span><br><span class="line">    $j=$mid + <span class="number">1</span>;</span><br><span class="line">    $k = $start;</span><br><span class="line">    $temparr = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>($i!=$mid+<span class="number">1</span> &amp;&amp; $j!=$end+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>($arr[$i] &gt;= $arr[$j])&#123;</span><br><span class="line">            $temparr[$k++] = $arr[$j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $temparr[$k++] = $arr[$i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将第一个子序列的剩余部分添加到已经排好序的 $temparr 数组中</span></span><br><span class="line">    <span class="keyword">while</span>($i != $mid+<span class="number">1</span>)&#123;</span><br><span class="line">        $temparr[$k++] = $arr[$i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将第二个子序列的剩余部分添加到已经排好序的 $temparr 数组中</span></span><br><span class="line">    <span class="keyword">while</span>($j != $end+<span class="number">1</span>)&#123;</span><br><span class="line">        $temparr[$k++] = $arr[$j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>($i=$start; $i&lt;=$end; $i++)&#123;</span><br><span class="line">        $arr[$i] = $temparr[$i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>);</span><br><span class="line">MergeSort($arr);</span><br><span class="line">var_dump($arr);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>飞鱼CRM数据拉取（PHP重写版）</title>
    <url>/posts/be1f.html</url>
    <content><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>CRM即客户关系管理，是指企业用CRM技术来管理与客户之间的关系。在不同场合下，CRM可能是一个管理学术语，可能是一个软件系统。通常所指的CRM，指用计算机自动化分析销售、市场营销、客户服务以及应用等流程的软件系统。它的目标是通过提高客户的价值、满意度、赢利性和忠实度来缩减销售周期和销售成本、增加收入、寻找扩展业务所需的新的市场和渠道。CRM是选择和管理有价值客户及其关系的一种商业策略，CRM要求以客户为中心的企业文化来支持有效的市场营销、销售与服务流程。</p>
<p>而这个飞鱼CRM就是今日头条下的一个客户管理系统，因为<a href="https://sf1-ttcdn-tos.pstatp.com/obj/feiyu-crm/clue_pull_api.pdf" target="_blank" rel="noopener">飞鱼数据转发原文档</a>使用的是Python示例，所以改写了一下，实现用API将飞鱼CRM的线索数据转发到本地。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User: 牧马人</span></span><br><span class="line"><span class="comment"> * DateTime: 2020/4/15 15:55</span></span><br><span class="line"><span class="comment"> * Desc:飞鱼CRM数据拉取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">header(<span class="string">"Content-Type: text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeiYuAction</span> <span class="keyword">extends</span> <span class="title">HomeCommonAction</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//飞鱼请求api地址</span></span><br><span class="line">    <span class="keyword">private</span> $host = <span class="string">'https://feiyu.oceanengine.com'</span>;</span><br><span class="line">    <span class="keyword">private</span> $pull_route = <span class="string">'/crm/v2/openapi/pull-clues/'</span>;</span><br><span class="line">    <span class="comment">//获取几分钟前的数据</span></span><br><span class="line">    <span class="keyword">private</span> $minute = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//第*页</span></span><br><span class="line">    <span class="keyword">private</span> $page = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//每页显示*条</span></span><br><span class="line">    <span class="keyword">private</span> $page_size = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//入口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pp01();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//账号为pp01的配置，把signature_key和token换成自己的，可在飞鱼系统=》系统设置=》线索数据转发中获取</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">pp01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//飞鱼key</span></span><br><span class="line">        $signature_key = <span class="string">'**********'</span>;</span><br><span class="line">        <span class="comment">//飞鱼token</span></span><br><span class="line">        $token = <span class="string">'******************************'</span>;</span><br><span class="line">        <span class="comment">//开始时间</span></span><br><span class="line">        $start_time = time()<span class="number">-60</span>*<span class="keyword">$this</span>-&gt;minute;</span><br><span class="line">        <span class="comment">//结束时间</span></span><br><span class="line">        $end_time = time();</span><br><span class="line">        <span class="comment">//第几页</span></span><br><span class="line">        $page = <span class="keyword">$this</span>-&gt;page;</span><br><span class="line">        <span class="comment">//每页显示多少数据</span></span><br><span class="line">        $page_size = <span class="keyword">$this</span>-&gt;page_size;</span><br><span class="line">        $url = <span class="keyword">$this</span>-&gt;pull_route.<span class="string">'?start_time='</span>.$start_time.<span class="string">'&amp;end_time='</span>.$end_time.<span class="string">' '</span>.time();</span><br><span class="line">        $signature = <span class="keyword">$this</span>-&gt;base64($url,$signature_key);</span><br><span class="line">        $output = <span class="keyword">$this</span>-&gt;curl($page,$page_size,$start_time,$end_time,$signature,$token);</span><br><span class="line">        <span class="keyword">if</span> ($output[<span class="string">'count'</span>]&gt;<span class="number">0</span> &amp;&amp; $output[<span class="string">'status'</span>]==<span class="string">'success'</span>)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;insertdata($output[<span class="string">'data'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * User: 牧马人</span></span><br><span class="line"><span class="comment">     * DateTime: 2020/4/15 16:55</span></span><br><span class="line"><span class="comment">     * Desc:⽤hmac的sha256对source_data进⾏加密并转为16进制，然后进⾏base64编码生成签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $signature_key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">base64</span><span class="params">($data,$signature_key)</span></span>&#123;</span><br><span class="line">        $signature = base64_encode(hash_hmac(<span class="string">'sha256'</span>, $data, $signature_key));</span><br><span class="line">        <span class="keyword">return</span> $signature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * User: 牧马人</span></span><br><span class="line"><span class="comment">     * DateTime: 2020/4/15 16:57</span></span><br><span class="line"><span class="comment">     * Desc:header参数,自己看去吧</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $page_size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $start_time</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $end_time</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $signature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">curl</span><span class="params">($page,$page_size,$start_time,$end_time,$signature,$token)</span></span>&#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, <span class="keyword">$this</span>-&gt;host.<span class="keyword">$this</span>-&gt;pull_route.</span><br><span class="line">            <span class="string">'?page='</span>.$page.<span class="string">'&amp;page_size='</span>.$page_size.</span><br><span class="line">            <span class="string">'&amp;start_time='</span> .$start_time.<span class="string">'&amp;end_time='</span>.$end_time);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">false</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_TIMEOUT, <span class="number">60</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_HTTPHEADER, <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'Content-Type: application/json;charset=UTF-8'</span>,</span><br><span class="line">            <span class="string">'Signature: '</span> . $signature,</span><br><span class="line">            <span class="string">'Timestamp: '</span> . time(),</span><br><span class="line">            <span class="string">'Access-Token: '</span> . $token,</span><br><span class="line">        ));</span><br><span class="line">        $output = curl_exec($ch);</span><br><span class="line">        $error = curl_error($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">        <span class="keyword">return</span> json_decode($output,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * User: 牧马人</span></span><br><span class="line"><span class="comment">     * DateTime: 2020/4/15 16:59</span></span><br><span class="line"><span class="comment">     * Desc:引用BiaoZhao将数据写入到数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>        $data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">insertdata</span><span class="params">($data,$type = <span class="string">''</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $value)&#123;</span><br><span class="line">            $biaoZhaoModel = D(<span class="string">'BiaoZhao'</span>);</span><br><span class="line">            $provincename =  substr($value[<span class="string">'location'</span>],<span class="number">0</span>,strpos($value[<span class="string">'location'</span>], <span class="string">'+'</span>));</span><br><span class="line">            $cityname = trim(strrchr($value[<span class="string">'location'</span>], <span class="string">'+'</span>),<span class="string">'+'</span>);</span><br><span class="line">            <span class="keyword">if</span> (!$province)&#123;</span><br><span class="line">                $province = <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $city = M(<span class="string">'Cities'</span>)-&gt;where(<span class="string">"name='"</span>.$cityname.<span class="string">"' and level = 1"</span>)-&gt;getField(<span class="string">'cityid'</span>);</span><br><span class="line">            <span class="keyword">if</span> (!$city)&#123;</span><br><span class="line">                $city = M(<span class="string">'Cities'</span>)-&gt;where(<span class="string">"parentid='"</span>.$province.<span class="string">"' and capital = 1"</span>)-&gt;getField(<span class="string">'cityid'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($type == <span class="string">'ntj'</span> &amp;&amp; $province==<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $array[<span class="string">'province'</span>] = $province;</span><br><span class="line">            $array[<span class="string">'city'</span>] = $city;</span><br><span class="line">            $array[<span class="string">'name'</span>] = $value[<span class="string">'name'</span>];</span><br><span class="line">            $array[<span class="string">'mobilephone'</span>] = $value[<span class="string">'telphone'</span>];</span><br><span class="line">            $array[<span class="string">'content'</span>] = <span class="string">'飞鱼自动导入'</span>;</span><br><span class="line">            $array[<span class="string">'original_time'</span>] = $value[<span class="string">'create_time'</span>];</span><br><span class="line">            $res = $biaoZhaoModel-&gt;saveData(<span class="number">1</span>,$array);</span><br><span class="line">            <span class="keyword">if</span> (!$res)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($res[<span class="string">'data'</span>][<span class="string">'bid'</span>])&#123;</span><br><span class="line">                $data[<span class="string">'utm'</span>] = $value[<span class="string">'ad_plan_name'</span>];</span><br><span class="line">                $data[<span class="string">'dateline'</span>] = time();</span><br><span class="line">                $data[<span class="string">'id'</span>] = $res[<span class="string">'data'</span>][<span class="string">'bid'</span>];</span><br><span class="line">                $data[<span class="string">'idtype'</span>] = <span class="string">'zhaobiao'</span>;</span><br><span class="line">                $utmRet = M(<span class="string">'Utm'</span>)-&gt;add($data);</span><br><span class="line">                <span class="keyword">if</span> (!$utmRet)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>crm</tag>
      </tags>
  </entry>
  <entry>
    <title>web网页分享微信自定义信息</title>
    <url>/posts/3f96.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>开发前请确保，有一个公众号，并且该公众号拥有分享权限（可在公众号=》开发=》接口权限中查看你的公众号拥有的权限），否则在App上报permission denied错误，在开发者工具报the permission value is offline verifying错误，可结合参考<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115" target="_blank" rel="noopener">微信JS-SDK说明文档</a>，其中有些东西写的比较low，可自己进行改进。</p>
<h2 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h2><h3 id="效果对比"><a href="#效果对比" class="headerlink" title="效果对比"></a>效果对比</h3><p><img src="/uploads/image-20200415151424476.png" alt="image-20200415151424476"></p>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>先登录微信公众平台进入设置=》公众号设置=》功能设置填写“JS接口安全域名”。</p>
<p><img src="/uploads/image-20200415145821006.png" alt="image-20200415145821006"></p>
<h3 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 分享至微信 --&gt;</span><br><span class="line"> <span class="comment">// 引入js文件</span></span><br><span class="line">&lt;script src=<span class="string">"https://res.wx.qq.com/open/js/jweixin-1.6.0.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 获取当前页面的url</span></span><br><span class="line"><span class="regexp">	var  url = window.location.href;</span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/当cookie不存在的时候设置cookie</span></span><br><span class="line"><span class="regexp">	if(getCookie('isreload') == null)&#123;setCookie('isreload','1');&#125;</span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/设置cookie</span></span><br><span class="line"><span class="regexp">    function setCookie(name,value)</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">        var Days = 30;</span></span><br><span class="line"><span class="regexp">        var exp = new Date();</span></span><br><span class="line"><span class="regexp">        exp.setTime(exp.getTime() + Days*24*60*60*1000);</span></span><br><span class="line"><span class="regexp">        document.cookie = name + "="+ escape (value) + ";expires=" + exp.toGMTString();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/获取cookie</span></span><br><span class="line"><span class="regexp">    function getCookie(name)</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">        var arr,reg=new RegExp("(^| )"+name+"=([^;]*)(;|$)");</span></span><br><span class="line"><span class="regexp">        if(arr=document.cookie.match(reg))</span></span><br><span class="line"><span class="regexp">            return unescape(arr[2]);</span></span><br><span class="line"><span class="regexp">        else</span></span><br><span class="line"><span class="regexp">            return null;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/通过ajax获取必要参数</span></span><br><span class="line"><span class="regexp">    $.ajax(&#123;</span></span><br><span class="line"><span class="regexp">        type : "get",</span></span><br><span class="line"><span class="regexp">        url : "https:/</span><span class="comment">/*******.com/jssdk.php?url="+url, //这里的url换成自己的url</span></span><br><span class="line"><span class="comment">        dataType : "jsonp",</span></span><br><span class="line"><span class="comment">        jsonp: "callback",</span></span><br><span class="line"><span class="comment">        jsonpCallback:"success_jsonpCallback",</span></span><br><span class="line"><span class="comment">        success : function(data)&#123;</span></span><br><span class="line"><span class="comment">            wx.config(&#123;</span></span><br><span class="line"><span class="comment">                debug: false, // 开启调试模式</span></span><br><span class="line"><span class="comment">                appId: data.appId, // 必填，公众号的唯一标识</span></span><br><span class="line"><span class="comment">                timestamp: data.timestamp, // 必填，生成签名的时间戳</span></span><br><span class="line"><span class="comment">                nonceStr: data.nonceStr, // 必填，生成签名的随机串</span></span><br><span class="line"><span class="comment">                signature: data.signature,// 必填，签名</span></span><br><span class="line"><span class="comment">                jsApiList: [ // 必填，需要使用的JS接口列表</span></span><br><span class="line"><span class="comment">                    "updateAppMessageShareData",</span></span><br><span class="line"><span class="comment">                    "updateTimelineShareData"</span></span><br><span class="line"><span class="comment">                ] </span></span><br><span class="line"><span class="comment">            &#125;);</span></span><br><span class="line"><span class="comment">        &#125;,</span></span><br><span class="line"><span class="comment">        error:function(data)&#123;</span></span><br><span class="line"><span class="comment">            if(getCookie('isreload')&lt;3)&#123;</span></span><br><span class="line"><span class="comment">                location.reload(); //如果加载失败刷新页面重新加载,最多刷新两次</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            var i = getCookie('isreload');</span></span><br><span class="line"><span class="comment">            setCookie('isreload',++i);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">wx.ready(function () &#123;   //需在用户可能点击分享按钮前就先调用</span></span><br><span class="line"><span class="comment">    wx.updateAppMessageShareData(&#123;</span></span><br><span class="line"><span class="comment">        title: document.title, // 分享标题</span></span><br><span class="line"><span class="comment">        desc: '', // 分享描述</span></span><br><span class="line"><span class="comment">        link: url, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line"><span class="comment">        imgUrl: 'imgsrc', // 分享图标</span></span><br><span class="line"><span class="comment">        success: function () &#123;</span></span><br><span class="line"><span class="comment">            // 设置成功</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">    wx.updateTimelineShareData(&#123;</span></span><br><span class="line"><span class="comment">        title: document.title, // 分享标题</span></span><br><span class="line"><span class="comment">        link: url, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line"><span class="comment">        imgUrl: 'imgsrc', // 分享图标</span></span><br><span class="line"><span class="comment">        success: function () &#123;</span></span><br><span class="line"><span class="comment">            // 设置成功</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">wx.error(function (res) &#123;</span></span><br><span class="line"><span class="comment">    //alert(res.errMsg);//错误提示</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="php代码"><a href="#php代码" class="headerlink" title="php代码"></a>php代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSSDK</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $appId;</span><br><span class="line">  <span class="keyword">private</span> $appSecret;</span><br><span class="line">  <span class="keyword">private</span> $url;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($appId,$appSecret,$url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;appId = $appId;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;appSecret = $appSecret;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;url = $url;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSignPackage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $jsapiTicket = <span class="keyword">$this</span>-&gt;getJsApiTicket();</span><br><span class="line">    $url = <span class="keyword">$this</span>-&gt;url;</span><br><span class="line">    $timestamp = time();</span><br><span class="line">    $nonceStr = <span class="keyword">$this</span>-&gt;createNonceStr();</span><br><span class="line">    <span class="comment">// 这里参数的顺序要按照 key 值 ASCII 码升序排序</span></span><br><span class="line">    $string = <span class="string">"jsapi_ticket=$jsapiTicket&amp;noncestr=$nonceStr&amp;timestamp=$timestamp&amp;url=$url"</span>;</span><br><span class="line">    $signature = sha1($string);</span><br><span class="line">    $signPackage = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">"appId"</span>     =&gt; <span class="keyword">$this</span>-&gt;appId,</span><br><span class="line">      <span class="string">"nonceStr"</span>  =&gt; $nonceStr,</span><br><span class="line">      <span class="string">"timestamp"</span> =&gt; $timestamp,</span><br><span class="line">      <span class="string">"url"</span>       =&gt; $url,</span><br><span class="line">      <span class="string">"signature"</span> =&gt; $signature,</span><br><span class="line">      <span class="string">"rawString"</span> =&gt; $string</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> $signPackage;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">createNonceStr</span><span class="params">($length = <span class="number">16</span>)</span> </span>&#123;</span><br><span class="line">    $chars = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>;</span><br><span class="line">    $str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $length; $i++) &#123;</span><br><span class="line">      $str .= substr($chars, mt_rand(<span class="number">0</span>, strlen($chars) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getJsApiTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// jsapi_ticket 应该全局存储与更新，以下代码以写入到文件中做示例</span></span><br><span class="line">    $data = json_decode(<span class="keyword">$this</span>-&gt;get_php_file(<span class="string">"jsapi_ticket.php"</span>));</span><br><span class="line">    <span class="keyword">if</span> ($data-&gt;expire_time &lt; time()) &#123;</span><br><span class="line">      $accessToken = <span class="keyword">$this</span>-&gt;getAccessToken();</span><br><span class="line">      <span class="comment">// 如果是企业号用以下 URL 获取 ticket</span></span><br><span class="line">      <span class="comment">// $url = "https://qyapi.weixin.qq.com/cgi-bin/get_jsapi_ticket?access_token=$accessToken";</span></span><br><span class="line">      $url = <span class="string">"https://api.weixin.qq.com/cgi-bin/ticket/getticket?type=jsapi&amp;access_token=$accessToken"</span>;</span><br><span class="line">      $res = json_decode(<span class="keyword">$this</span>-&gt;httpGet($url));</span><br><span class="line">      $ticket = $res-&gt;ticket;</span><br><span class="line">      <span class="keyword">if</span> ($ticket) &#123;</span><br><span class="line">        $data-&gt;expire_time = time() + <span class="number">7000</span>;</span><br><span class="line">        $data-&gt;jsapi_ticket = $ticket;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set_php_file(<span class="string">"jsapi_ticket.php"</span>, json_encode($data));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $ticket = $data-&gt;jsapi_ticket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $ticket;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getAccessToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// access_token 应该全局存储与更新，以下代码以写入到文件中做示例</span></span><br><span class="line">    $data = json_decode(<span class="keyword">$this</span>-&gt;get_php_file(<span class="string">"access_token.php"</span>));</span><br><span class="line">    <span class="keyword">if</span> ($data-&gt;expire_time &lt; time()) &#123;</span><br><span class="line">      <span class="comment">// 如果是企业号用以下URL获取access_token</span></span><br><span class="line">      <span class="comment">// $url = "https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=$this-&gt;appId&amp;corpsecret=$this-&gt;appSecret";</span></span><br><span class="line">      $url = <span class="string">"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=$this-&gt;appId&amp;secret=$this-&gt;appSecret"</span>;</span><br><span class="line">      $res = json_decode(<span class="keyword">$this</span>-&gt;httpGet($url));</span><br><span class="line">      $access_token = $res-&gt;access_token;</span><br><span class="line">      <span class="keyword">if</span> ($access_token) &#123;</span><br><span class="line">        $data-&gt;expire_time = time() + <span class="number">7000</span>;</span><br><span class="line">        $data-&gt;access_token = $access_token;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set_php_file(<span class="string">"access_token.php"</span>, json_encode($data));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $access_token = $data-&gt;access_token;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $access_token;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">httpGet</span><span class="params">($url)</span> </span>&#123;</span><br><span class="line">    $curl = curl_init();</span><br><span class="line">    curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">    curl_setopt($curl, CURLOPT_TIMEOUT, <span class="number">500</span>);</span><br><span class="line">    <span class="comment">// 为保证第三方服务器与微信服务器之间数据传输的安全性，所有微信接口采用https方式调用，必须使用下面2行代码打开ssl安全校验。</span></span><br><span class="line">    <span class="comment">// 如果在部署过程中代码在此处验证失败，请到 http://curl.haxx.se/ca/cacert.pem 下载新的证书判别文件。</span></span><br><span class="line">    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, <span class="keyword">true</span>);</span><br><span class="line">    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, <span class="keyword">true</span>);</span><br><span class="line">    curl_setopt($curl, CURLOPT_URL, $url);</span><br><span class="line"></span><br><span class="line">    $res = curl_exec($curl);</span><br><span class="line">    curl_close($curl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $res;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_php_file</span><span class="params">($filename)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> trim(substr(file_get_contents($filename), <span class="number">15</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">set_php_file</span><span class="params">($filename, $content)</span> </span>&#123;</span><br><span class="line">    $fp = fopen($filename, <span class="string">"w"</span>);</span><br><span class="line">    fwrite($fp, <span class="string">"&lt;?php exit();?&gt;"</span> . $content);</span><br><span class="line">    fclose($fp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"><span class="comment">//yourappId和appSecret换成自己的，可在公众号=》基本配置中查找</span></span><br><span class="line">$jssdk = <span class="keyword">new</span> JSSDK(<span class="string">'yourappId'</span>,<span class="string">'appSecret'</span>,$url);</span><br><span class="line">$signPackage = $jssdk-&gt;GetSignPackage();</span><br><span class="line">$tmp=json_encode(<span class="keyword">array</span> (<span class="string">'appId'</span>=&gt;$signPackage[<span class="string">"appId"</span>],<span class="string">'timestamp'</span>=&gt;$signPackage[<span class="string">"timestamp"</span>],<span class="string">'nonceStr'</span>=&gt;$signPackage[<span class="string">"nonceStr"</span>],<span class="string">'signature'</span>=&gt;$signPackage[<span class="string">"signature"</span>],<span class="string">'url'</span>=&gt;$signPackage[<span class="string">"url"</span>]));</span><br><span class="line">$callback = $_GET[<span class="string">'callback'</span>];</span><br><span class="line"><span class="keyword">echo</span> $callback.<span class="string">'('</span>.$tmp.<span class="string">')'</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯广告线索平台（广点通拉取线索信息）</title>
    <url>/posts/4c2as1.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本文章记录腾讯广告数据拉取，这个和飞鱼的接口基本上就是大同小异，<a href="https://leads.qq.com/assets/doc/api_guide.pdf" target="_blank" rel="noopener">原腾讯线索平台对接文档</a>。<br>使用方法：将在后台获取的密钥和token替换到相应的位置，按自己的需要修改插入方法即可。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User: 牧马人</span></span><br><span class="line"><span class="comment"> * DateTime: 2020-04-14 12:16</span></span><br><span class="line"><span class="comment"> * Desc:广点通拉取线索信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Common</span>\<span class="title">CommonEvent</span>\<span class="title">HomeController</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Common</span>\<span class="title">CommonEvent</span>\<span class="title">AjaxCommon</span>;</span><br><span class="line">header(<span class="string">"Content-Type: text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GdtController</span> <span class="keyword">extends</span> <span class="title">HomeController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//广点通请求地址</span></span><br><span class="line">    <span class="keyword">private</span> $host = <span class="string">'https://leads.qq.com/api/mv1'</span>;</span><br><span class="line">    <span class="keyword">private</span> $pull_route = <span class="string">'/leads/list'</span>;</span><br><span class="line">    <span class="comment">//获取几分钟前的数据</span></span><br><span class="line">    <span class="keyword">private</span> $minute = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//第*页</span></span><br><span class="line">    <span class="keyword">private</span> $page = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//每页*获取条数据</span></span><br><span class="line">    <span class="keyword">private</span> $page_size = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * User: 牧马人</span></span><br><span class="line"><span class="comment">     * DateTime: 2019/11/7 9:28</span></span><br><span class="line"><span class="comment">     * Desc:运行入口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;azw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * User: 牧马人</span></span><br><span class="line"><span class="comment">     * DateTime: 2020-04-14 9:29</span></span><br><span class="line"><span class="comment">     * Desc:账号为azw的配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">azw</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//广点通token</span></span><br><span class="line">        $token = <span class="string">'**************'</span>;</span><br><span class="line">        <span class="comment">//广点通secret</span></span><br><span class="line">        $secret = <span class="string">'**************'</span>;</span><br><span class="line">        <span class="comment">//开始时间</span></span><br><span class="line">        $start_time = time()<span class="number">-60</span>*<span class="keyword">$this</span>-&gt;minute;</span><br><span class="line">        <span class="comment">//结束时间</span></span><br><span class="line">        $end_time = time();</span><br><span class="line">        <span class="comment">//第几页</span></span><br><span class="line">        $page = <span class="keyword">$this</span>-&gt;page;</span><br><span class="line">        <span class="comment">//每页显示多少数据</span></span><br><span class="line">        $page_size = <span class="keyword">$this</span>-&gt;page_size;</span><br><span class="line">        $signature = <span class="keyword">$this</span>-&gt;base64($token,$secret);</span><br><span class="line">        $output = <span class="keyword">$this</span>-&gt;curl($page,$page_size,$start_time,$end_time,$signature);</span><br><span class="line">        <span class="keyword">if</span> ($output[<span class="string">'code'</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;insertdata($output[<span class="string">'data'</span>][<span class="string">'list'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * User: 牧马人</span></span><br><span class="line"><span class="comment">     * DateTime: 2020-04-14 9:29</span></span><br><span class="line"><span class="comment">     * Desc:签名加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $secret</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">base64</span><span class="params">($token=<span class="string">''</span>,$secret=<span class="string">''</span>)</span></span>&#123;</span><br><span class="line">        $token = $token; <span class="comment">//⼴告主线索平台token</span></span><br><span class="line">        $secret = $secret; <span class="comment">//⼴告主线索平台⽣成的接⼝密钥</span></span><br><span class="line">        $timestamp = time(); <span class="comment">//即当前的秒级时间戳</span></span><br><span class="line">        $signature = base64_encode($token . <span class="string">","</span> . $timestamp . <span class="string">","</span> .sha1($token.<span class="string">"."</span>.$timestamp.<span class="string">"."</span>.$secret));</span><br><span class="line">        <span class="keyword">return</span> $signature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * User: 牧马人</span></span><br><span class="line"><span class="comment">     * DateTime: 2020-04-14 9:30</span></span><br><span class="line"><span class="comment">     * Desc:进行curl请求,并将获取到的数据进行数组转换</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $page_size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $start_time</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $end_time</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $signature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">curl</span><span class="params">($page,$page_size,$start_time,$end_time,$signature)</span></span>&#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, <span class="keyword">$this</span>-&gt;host.<span class="keyword">$this</span>-&gt;pull_route.</span><br><span class="line">            <span class="string">'?page='</span>.$page.<span class="string">'&amp;page_size='</span>.$page_size.</span><br><span class="line">            <span class="string">'&amp;start_time='</span>.$start_time.<span class="string">'&amp;end_time='</span>.$end_time);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">false</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_TIMEOUT, <span class="number">60</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_HTTPHEADER, <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'X-Signature:'</span>.$signature,</span><br><span class="line">            <span class="string">'Accept:application/json'</span>,</span><br><span class="line">            <span class="string">'Content-Type:application/json'</span>,</span><br><span class="line">        ));</span><br><span class="line">        $output = curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">        <span class="keyword">return</span> json_decode($output,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * User: 牧马人</span></span><br><span class="line"><span class="comment">     * DateTime: 2020-04-14 9:30</span></span><br><span class="line"><span class="comment">     * Desc:插入到数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">insertdata</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">        $ajaxModel = <span class="keyword">new</span> AjaxCommon();</span><br><span class="line">        <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $value)&#123;</span><br><span class="line">            <span class="comment">//尝试获取城市id</span></span><br><span class="line">            $city = M(<span class="string">'Cities'</span>)-&gt;where(<span class="string">"name='"</span>.$value[<span class="string">'tel_location'</span>].<span class="string">"' and level = 1"</span>)-&gt;getField(<span class="string">'cityid'</span>);</span><br><span class="line">            <span class="keyword">if</span> (!$city)&#123;</span><br><span class="line">                $province = <span class="number">3</span>;</span><br><span class="line">                $city = <span class="number">978</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//如果获取到城市id,再请求获取到省份id</span></span><br><span class="line">                $province = M(<span class="string">'Cities'</span>)-&gt;where(<span class="string">"name='"</span>.$value[<span class="string">'tel_location'</span>].<span class="string">"' and level = 1"</span>)-&gt;getField(<span class="string">'parentid'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $array[<span class="string">'province'</span>] = $province; <span class="comment">//省id</span></span><br><span class="line">            $array[<span class="string">'city'</span>] = $city; <span class="comment">//市id</span></span><br><span class="line">            $array[<span class="string">'name'</span>] = $value[<span class="string">'leads_name'</span>]; <span class="comment">//客户名称</span></span><br><span class="line">            $array[<span class="string">'mobilephone'</span>] = $value[<span class="string">'leads_tel'</span>];<span class="comment">//客户手机号码</span></span><br><span class="line">            $array[<span class="string">'isBuried'</span>] = <span class="number">2</span>; <span class="comment">//提交方式</span></span><br><span class="line">            $array[<span class="string">'furniture'</span>] = <span class="number">0</span>; <span class="comment">//所选的家具</span></span><br><span class="line">            $array[<span class="string">'original_time'</span>] = strtotime($value[<span class="string">'leads_create_time'</span>]);</span><br><span class="line">            $res = $ajaxModel-&gt;tenderSave(<span class="keyword">array</span>(),<span class="string">'add'</span>,<span class="number">0</span>,<span class="keyword">array</span>(),<span class="number">1</span>,$array);</span><br><span class="line">            <span class="keyword">if</span> ($res[<span class="string">'state'</span>]!=<span class="string">'success'</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//添加utm</span></span><br><span class="line">            <span class="keyword">if</span> ($res[<span class="string">'bid'</span>]&amp;&amp;$res[<span class="string">'cid'</span>])&#123;</span><br><span class="line">                $data[<span class="string">'utm'</span>] = $value[<span class="string">'adgroup_name'</span>];</span><br><span class="line">                $data[<span class="string">'dateline'</span>] = time();</span><br><span class="line">                $data[<span class="string">'id'</span>] = $res[<span class="string">'cid'</span>];</span><br><span class="line">                $data[<span class="string">'idtype'</span>] = <span class="string">'zhaobiao'</span>;</span><br><span class="line">                $utmRet = M(<span class="string">'Utm'</span>)-&gt;add($data);</span><br><span class="line">                <span class="keyword">if</span> (!$utmRet)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Php函数学习</title>
    <url>/posts/4b1d.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>因为写项目完全靠ide联想，速度有点慢，所以需要完全记下来，又因为英语差，只能靠死记硬背，所以标注了谐音。<br>给自己定个目标，每天记住三个。</p>
<h2 id="Array函数："><a href="#Array函数：" class="headerlink" title="Array函数："></a>Array函数：</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>();</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞<br>定义：创建数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_change_key_case(<span class="keyword">array</span>,<span class="keyword">case</span>);</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 陈志 剋 剋四<br>定义：将数组的键值全部更改为大写或小写<br>参数：<br>    array ：必需。规定要使用的数组。<br>    case：可选。<br>        CASE_LOWER - 默认值。将数组的键转换为小写字母。<br>        CASE_UPPER - 将数组的键转换为大写字母。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_chunk(<span class="keyword">array</span>,size,preserve_key);</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 唱克<br>定义：把数组分割为新的数组<br>参数：<br>    array： 必需。规定要使用的数组。<br>    size： 必需。整数值，规定每个新数组包含多少个元素。<br>    preserve_key：可选。<br>        true - 保留原始数组中的键名。<br>        false - 默认。每个结果数组使用从零开始的新数组索引。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_column(<span class="keyword">array</span>,column_key,index_key);</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 卡拉姆<br>定义：返回输入数组中某个单一列的值<br>参数：<br>    array：必需。规定要使用的多维数组（记录集）。<br>    column_key：必需。需要返回值的列。可以是索引数组的列的整数索引，或者是关联数组的列的字符串键值。该参数也可以是 NULL，此时将返回整个数组（配合 index_key 参数来重置数组键的时候，非常有用）。<br>    index_key： 可选。用作返回数组的索引/键的列。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_combine(keys,values);</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 肯败呢<br>定义：通过合并两个数组来创建一个新数组，其中的一个数组是键名，另一个数组的值为键值。<br>参数：<br>    keys：必需。键名数组。<br>    values：必需。键值数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_count_values(<span class="keyword">array</span>);</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 康特 外游四<br>定义：用于统计数组中所有值出现的次数。<br>参数：<br>    array：必需。规定需要对值进行计数的数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_diff(array1,array2,array3...);</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 戴夫<br>定义：比较两个（或更多个）数组的键值，并返回差集。<br>参数：<br>    array1：必需。与其他数组进行比较的第一个数组。<br>    array2：必需。与第一个数组进行比较的数组。<br>    array3：可选。与第一个数组进行比较的其他数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_diff_assoc(array1,array2,array3...);</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 戴夫 啊撒课<br>定义：用于比较两个（或更多个）数组的键名和键值 ，并返回差集。<br>参数：<br>    array1：必需。与其他数组进行比较的第一个数组。<br>    array2：必需。与第一个数组进行比较的数组。<br>    array3：可选。与第一个数组进行比较的其他数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_diff_key(array1,array2,array3...);</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 戴夫 剋<br>定义：用于比较两个（或更多个）数组的键名 ，并返回差集。<br>参数：<br>    array1：必需。与其他数组进行比较的第一个数组。<br>    array2：必需。与第一个数组进行比较的数组。<br>    array3：可选。与第一个数组进行比较的其他数组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_diff_uassoc(array1,array2,array3...,myfunction);</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 戴夫 优啊撒课<br>定义：用于比较两个（或更多个）数组的键名和键值 ，并返回差集。<br>参数：<br>    array1：必需。与其他数组进行比较的第一个数组。<br>    array2：必需。与第一个数组进行比较的数组。<br>    array3：可选。与第一个数组进行比较的其他数组。<br>    myfunction： 必需。定义可调用比较函数的字符串。如果第一个参数小于、等于或大于第二个参数，则该比较函数必须返回小于、等于或大于 0 的整数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_diff_ukey(array1,array2,array3...,myfunction);</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 戴夫 优剋<br>定义：用于比较两个（或更多个）数组的键名 ，并返回差集。<br>参数：<br>    array1：必需。与其他数组进行比较的第一个数组。<br>    array2：必需。与第一个数组进行比较的数组。<br>    array3：可选。与第一个数组进行比较的其他数组。<br>    myfunction： 必需。定义可调用比较函数的字符串。如果第一个参数小于、等于或大于第二个参数，则该比较函数必须返回小于、等于或大于 0 的整数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_fill(index,number,value);</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 肺癌乐<br>定义：用给定的值填充数组，返回的数组有 number 个元素，值为 <em>value</em>。<br>参数：<br>    index： 必需。被返回数组的第一个索引。<br>    number：必需。规定要插入的元素数。<br>    value：必需。规定供填充数组所使用的值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_fill_keys(arraykeys,value);</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 肺癌乐 剋四<br>定义：使用指定的键和值填充数组。<br>参数：<br>    arraykeys： 必需。使用该数组的值作为键。非法值将被转换为字符串。<br>    value：必需。填充数组所使用的值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_filter(<span class="keyword">array</span>,callbackfunction);</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 肺哦特<br>定义：用回调函数过滤数组中的值。<br>参数：<br>    array： 必需。规定要过滤的数组。<br>    callbackfunction：必需。规定要使用的回调函数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_flip(<span class="keyword">array</span>);</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 夫雷破<br>定义：用于反转/交换数组中所有的键名以及它们关联的键值。<br>参数：<br>    array：必需。规定需进行键/值对反转的数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_intersect(array1,array2,array3...);</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 因特菜克特<br>定义：用于比较两个（或更多个）数组的键值，并返回交集。<br>参数：<br>    array1： 必需。与其他数组进行比较的第一个数组。<br>    array2： 必需。与第一个数组进行比较的数组。<br>    array3： 可选。与第一个数组进行比较的其他数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_intersect_assoc(array1,array2,array3...)</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 因特菜克特 啊撒课<br>定义：用于比较两个（或更多个）数组的键名和键值，并返回交集。<br>参数：<br>    array1： 必需。与其他数组进行比较的第一个数组。<br>    array2： 必需。与第一个数组进行比较的数组。<br>    array3： 可选。与第一个数组进行比较的其他数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_intersect_key(array1,array2,array3...)</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 因特菜克特 剋<br>定义：用于比较两个（或更多个）数组的键名 ，并返回交集。<br>参数：<br>    array1： 必需。与其他数组进行比较的第一个数组。<br>    array2： 必需。与第一个数组进行比较的数组。<br>    array3： 可选。与第一个数组进行比较的其他数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_intersect_ukey(array1,array2,array3...,myfunction)</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 因特菜克特 优剋<br>定义：用于比较两个（或更多个）数组的键名 ，并返回交集。<br>参数：<br>    array1： 必需。与其他数组进行比较的第一个数组。<br>    array2： 必需。与第一个数组进行比较的数组。<br>    array3： 可选。与第一个数组进行比较的其他数组。<br>    myfunction：必需。定义可调用比较函数的字符串。如果第一个参数小于、等于或大于第二个参数，则该比较函数必须返回小于、等于或大于 0 的整数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_intersect_uassoc(array1,array2,array3...,myfunction)</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 因特菜克特 优啊撒课<br>定义：用于比较两个（或更多个）数组的键名和键值 ，并返回交集。<br>参数：<br>    array1： 必需。与其他数组进行比较的第一个数组。<br>    array2： 必需。与第一个数组进行比较的数组。<br>    array3： 可选。与第一个数组进行比较的其他数组。<br>    myfunction：必需。定义可调用比较函数的字符串。如果第一个参数小于、等于或大于第二个参数，则该比较函数必须返回小于、等于或大于 0 的整数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_key_exists(key,<span class="keyword">array</span>)</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 剋 A死菜特死<br>定义：检查某个数组中是否存在指定的键名，如果键名存在则返回 true，如果键名不存在则返回 false。<br>参数：<br>    key： 必需。规定键名。<br>    array： 必需。规定数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_keys(<span class="keyword">array</span>,value,strict)</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 剋死<br>定义：返回包含数组中所有键名的一个新数组。<br>参数：<br>    array： 必需。规定数组。<br>    value： 可选。您可以指定键值，然后只有该键值对应的键名会被返回。<br>    strict：可选。与 <em>value</em> 参数一起使用。<br>        true - 返回带有指定键值的键名。依赖类型，数字 5 与字符串 “5” 是不同的。<br>        false - 默认值。不依赖类型，数字 5 与字符串 “5” 是相同的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_map(myfunction,array1,array2,array3...)</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 漫坡<br>定义：将用户自定义函数作用到数组中的每个值上，并返回用户自定义函数作用后的带有新值的数组。<br>参数：<br>    myfunction： 必需。用户自定义函数的名称，或者是 null。<br>    array1：必需。规定数组。<br>    array2：可选。规定数组。<br>    array3：可选。规定数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_merge(array1,array2,array3...)</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 墨池<br>定义：把一个或多个数组合并为一个数组。<br>参数：<br>    array1：必需。规定数组。<br>    array2：可选。规定数组。<br>    array3：可选。规定数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_merge_recursive(array1,array2,array3...)</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 墨池 软壳塞夫<br>定义：把一个或多个数组合并为一个数组。该函数与array_merge()函数的区别在于处理两个或更多个数组元素有相同的键名时。array_merge_recursive() 不会进行键名覆盖，而是将多个相同键名的值递归组成一个数组。<br>参数：<br>    array1：必需。规定数组。<br>    array2：可选。规定数组。<br>    array3：可选。规定数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_multisort(array1,sorting order,sorting type,array2,array3...)</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 毛体扫特<br>定义：array_multisort() 函数返回排序数组。您可以输入一个或多个数组。函数先对第一个数组进行排序，接着是其他数组，如果两个或多个值相同，它将对下一个数组进行排序。<br>参数：<br>    array1：必需。规定数组。<br>    sorting order：可选。规定排列顺序。<br>        可能的值：<br>            SORT_ASC - 默认。按升序排列 (A-Z)。<br>            SORT_DESC - 按降序排列 (Z-A)。<br>    sorting type：可选。规定排序类型。<br>        可能的值：<br>            SORT_REGULAR - 默认。把每一项按常规顺序排列（Standard ASCII，不改变类型）。<br>            SORT_NUMERIC - 把每一项作为数字来处理<br>            SORT_STRING - 把每一项作为字符串来处理。<br>            SORT_LOCALE_STRING - 把每一项作为字符串来处理，基于当前区域设置（可通过 setlocale() 进行更改）。<br>            SORT_NATURAL - 把每一项作为字符串来处理，使用类似 natsort() 的自然排序。<br>            SORT_FLAG_CASE - 可以结合（按位或）SORT_STRING 或 SORT_NATURAL 对字符串进行排序，不区分大小写。</p>
<p>​    array2：可选。规定数组。<br>​    array3：可选。规定数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_pad(<span class="keyword">array</span>,size,value)</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 派的<br>定义：将指定数量的带有指定值的元素插入到数组中。<br>参数：<br>    array：必需。规定数组。<br>    size：必需。规定从函数返回的数组中元素的个数。<br>    value：必需。规定从函数返回的数组中新元素的值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_pop(<span class="keyword">array</span>)</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 怕噗<br>定义：删除数组中的最后一个元素。<br>参数：<br>    array：必需。规定数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_product(<span class="keyword">array</span>)</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 噗绕刀可特<br>定义：计算并返回数组的乘积。<br>参数：<br>    array：必需。规定数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_push(<span class="keyword">array</span>,value1,value2...)</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 噗事<br>定义：向第一个参数的数组尾部添加一个或多个元素（入栈），然后返回新数组的长度。<br>参数：<br>    array：必需。规定数组。<br>    value1： 必需。规定要添加的值。<br>    value2：可选。规定要添加的值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_rand(<span class="keyword">array</span>,number)</span><br></pre></td></tr></table></figure>

<p>谐音：厄瑞 软的<br>定义：从数组中随机选出一个或多个元素，并返回。<br>参数：<br>    array：必需。规定数组。<br>    number： 可选。规定返回多少随机键名。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Php面试题整理</title>
    <url>/posts/3e2c.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>整合网上资源和自我面试过程中的面试题。毕竟不是大牛，基础也没有很牢固，所以特新建此篇文章并持续更新，以供以后刷题观看。</p>
<h2 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h2><h3 id="Web类型题"><a href="#Web类型题" class="headerlink" title="Web类型题"></a>Web类型题</h3><p><strong>1. HTTP 状态中302、403、 500代码含义？</strong></p>
<blockquote>
<p>12345原则。1.消息系列。2.成功系列。3.重定向系列。4.请求错误系列。5.服务器错误系列。<br>302：暂时性转移又称暂时重定向。403：禁止访问。500：服务器内部错误。</p>
</blockquote>
<p><strong>2. session与coookie的区别是什么，请从协议，产生的原因与作用说明。</strong></p>
<blockquote>
<p>区别：session是存储于服务器端，cookie是存储于客户端。session比较安全，cookie通过某些手段可以修改，不安全。session依赖于cookie进行传递。一般情况一个cookie保存的数据大小不超过4k，而session是占用服务器内容，原则上讲可以无限大。<br>产生原因和作用：http是无状态协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，在次交换数据需要重新建立连接。这就意味着服务器无法从连接上跟踪会话。于是产生出cookie实现跟踪。</p>
</blockquote>
<p><strong>3. 表单提交中的Get和Post的异同点</strong></p>
<blockquote>
<p>get 请求一般用于向服务端获取数据，post 一般向服务端提交数据。<br>get 传输的参数在 url 中，传递参数大小有限制，post是隐式提交，没有大小限制。<br>get 不安全，post 安全性比get高。<br>get请求在服务端用Request.queryString 接收 ,post 请求在服务端用Requset.form 接收。</p>
</blockquote>
<p> <strong>4. 如何在页面之间传递变量 ?</strong></p>
<blockquote>
<p>get，post，cookie，session，隐藏表单。</p>
</blockquote>
<p><strong>5. 对于大流量的网站，你会采用什么方法来解决访问量？</strong></p>
<blockquote>
<p>首先确认服务器硬件是否满足支持当前的流量。<br>优化数据库的访问。<br>禁止外部盗链。<br>控制大文件下载。<br>使用不同的主机分流。<br>使用流量分析统计工具。</p>
</blockquote>
<h3 id="Php类型题"><a href="#Php类型题" class="headerlink" title="Php类型题"></a>Php类型题</h3><p><strong>1. Php是什么意思</strong></p>
<blockquote>
<p>PHP是PHP的递归首字母缩写：Hypertext Preprocessor，一种用于创建动态和交互式HTML网页的脚本语言。当网站访问者打开页面时，服务器处理PHP命令，然后将结果发送到访问者的浏览器。</p>
</blockquote>
<p><strong>2. 什么是面向对象？主要特征是什么？</strong></p>
<blockquote>
<p>面向对象是程序的一种设计方式，它利于提高程序的重用性，使程序结构更加清晰。主要特征：封装，继承，多态，如果是4个方面则加上：抽象。</p>
<p>封装：</p>
<p>封装是保证软件部件具有优良的模块性的基础,封装的目标就是要实现软件部件的高内聚,低耦合,防止程序相互依赖性而带来的变动影响.</p>
<p>继承：</p>
<p>在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。继承是子类自动共享父类数据和方法的机制，这是类之间的一种关系，提高了软件的可重用性和可扩展性。</p>
<p>多态：</p>
<p>多态是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p>
<p>抽象：</p>
<p>抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处，并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与当前目标有关的方面。例如，看到一只蚂蚁和大象，你能够想象出它们的相同之处，那就是抽象。</p>
</blockquote>
<p><strong>3. 不使用cookie向客户端发送一个cookie.</strong></p>
<blockquote>
<p>session_start()开启时，会生成SID常量，当cookie开启时，这个常量为空，当cookie关闭时，会存储PHPSISSID的值。可以在通过在url后增加一个SID参数进行传递SESSIONID的值，从而可以使客户端页面可以使用session里面的值。当客户端开启cookie和服务器端开启session时。浏览器第一次请求，服务器会向浏览器端发送一个cookie里面存储SESSIONID，当浏览器第二次请求时会把已存在的cookie一起提交到服务器端。</p>
</blockquote>
<p><strong>4. cookie的设置及获取</strong></p>
<blockquote>
<p>设置cookie的值：siecookie(名称，值，保存时间，有效域)<br>获取cookie的值：$_COOKIE[‘名称’]</p>
</blockquote>
<p> <strong>5. isset() 和 empty() 区别</strong></p>
<blockquote>
<p>isset判断变量是否存在，可传入多个变量，若其中有一个变量不存在则返回false。empty判断变量是否为空，只可传入一个变量，如果为空则返回true。</p>
</blockquote>
<p><strong>6. include与require的区别</strong></p>
<blockquote>
<p>首先include和require都是引入指定的文件。_once表示只引入一次，即之前已经引入过的不再引入。<br>include()在执行文件时每次都要加载进行读取和评估，require()文件只加载处理一次。<br>include在引入不存文件时产生一个警告且脚本还会继续执行，require则会导致一个致命性错误且脚本停止执行。<br>include()是有条件包含函数，而 require()则是无条件包含函数。<br>include有返回值，而require没有。</p>
</blockquote>
<p><strong>7. Php单引号与双引号的区别</strong></p>
<blockquote>
<p>单引号不能解释变量，双引号中可以解释变量。<br>单引号中不能转义大多数字符，双引号中可以转义所有字符。<br>（双引号中的单引号可以解释变量和转义字符）</p>
</blockquote>
<p><strong>8. 请说明Php中传值和传引用的区别，什么时候传值什么时候传引用</strong></p>
<blockquote>
<p>传值：函数范围内对值得任何改变都会在函数外被忽略。<br>传引用：函数范围内对值得任何改变都会影响到函数外得值。<br>按值传递时，php必须复制值。特别是对于大型的字符串和对象来说，这将会是一个代价很大的操作。<br>按引用传递则不需要复制值，对于性能提高很有好处。</p>
</blockquote>
<p><strong>9. echo(),print(),print_r()的区别?</strong></p>
<blockquote>
<p>echo是php语句，print和print_r是函数，语句没有返回值，函数有返回值。<br>print只能打印简单的数据类型，print_r可以打印复杂的数据类型，echo可以输出一个或多个字符串。</p>
</blockquote>
<p><strong>10. 面向对象中接口与抽象类的区别</strong></p>
<blockquote>
<p>抽象类：它是一种特殊的，不能被实例化的类，只能作为其他类的父类使用。使用abstract关键字声明。</p>
<p>接口：它是一种特殊的抽象类，也是一个特殊的类，使用interface声明。</p>
<p>区别：</p>
<p>抽象类的操作通过继承关键字extends实现，而接口的使用是通过implements关键字来实现。</p>
<p>抽象类中有数据成员，可以实现数据的封装，但是接口没有数据成员。</p>
<p>抽象类中可以有构造方法，但是接口没有构造方法。</p>
<p>抽象类的方法可以通过private、protected、public关键字修饰（抽象方法不能是private），而接口中的方法只能使用public关键字修饰。</p>
<p>一个类只能继承于一个抽象类，而一个类可以同时实现多个接口。</p>
<p>抽象类中可以有成员方法的实现代码，而接口中不可以有成员方法的实现代码。</p>
</blockquote>
<p><strong>9.  请写出常见的排序算法</strong></p>
<blockquote>
<p>常见排序算法：冒泡，快速，简单选择，堆，直接插入，希尔，合并。</p>
</blockquote>
<p><strong>10. 能够使Php和html分开使用的模板</strong></p>
<blockquote>
<p>Smarty，template，phplibtemplate，Fasttenplate。</p>
</blockquote>
<p><strong>11. 有那些版本控制工具</strong></p>
<blockquote>
<p>Clear case，cvs，svn，git，rcs，ccc，pvcs。</p>
</blockquote>
<p><strong>12. 中文截取无乱码</strong></p>
<blockquote>
<p>mb_substr()</p>
</blockquote>
<p><strong>13. 获取客户端和服务端的ip</strong></p>
<blockquote>
<p>客户端：$_SERVER[‘REMOTE_ADDR’]<br>服务端：$_SERVER[‘SERVER_ADDR’]</p>
</blockquote>
<p><strong>14. 简述 private、 protected、 public修饰符的访问权限。</strong></p>
<blockquote>
<p>private : 私有成员, 在类的内部才可以访问。</p>
<p>protected : 保护成员，该类内部和继承类中可以访问。</p>
<p>public : 公共成员，完全公开，没有访问限制。</p>
</blockquote>
<p><strong>15. 堆和栈的区别？</strong></p>
<blockquote>
<p>栈是编译期间就分配好的内存空间，因此你的代码中必须就栈的大小有明确的定义；</p>
<p>堆是程序运行期间动态分配的内存空间，你可以根据程序的运行情况确定要分配的堆内存的大小。</p>
</blockquote>
<p><strong>16. 什么是构造函数，什么是析构函数，作用是什么?</strong></p>
<blockquote>
<p>构造函数（方法）是对象创建完成后第一个被对象自动调用的方法。它存在于每个声明的类中，是一个特殊的成员方法。作用是执行一些初始化的任务。Php中使用__construct()声明构造方法，并且只能声明一个。</p>
<p>析构函数（方法）作用和构造方法正好相反，是对象被销毁之前最后一个被对象自动调用的方法。是PHP5中新添加的内容作用是用于实现在销毁一个对象之前执行一些特定的操作，诸如关闭文件和释放内存等。</p>
</blockquote>
<p><strong>17. 如何重载父类的方法，举例说明</strong></p>
<blockquote>
<p>重载，即覆盖父类的方法，也就是使用子类中的方法替换从父类中继承的方法，也叫方法的重写。</p>
<p>覆盖父类方法的关键是在子类中创建于父类中相同的方法包括方法的名称、参数和返回值类型。PHP中只要求方法的名称相同即可。</p>
</blockquote>
<p><strong>18. 常用的魔术方法有哪些？举例说明</strong></p>
<blockquote>
<p>php规定以两个下划线（<strong>）开头的方法都保留为魔术方法，所以建议大家函数名最好不用</strong>开头，除非是为了重载已有的魔术方法。</p>
<p>__construct() 实例化类时自动调用。</p>
<p>__destruct() 类对象使用结束时自动调用。</p>
<p>__set() 在给未定义的属性赋值的时候调用。</p>
<p>__get() 调用未定义的属性时候调用。</p>
<p>__isset() 使用isset()或empty()函数时候会调用。</p>
<p>__unset() 使用unset()时候会调用。</p>
<p>__sleep() 使用serialize序列化时候调用。</p>
<p>__wakeup() 使用unserialize反序列化的时候调用。</p>
<p>__call() 调用一个不存在的方法的时候调用。</p>
<p>__callStatic()调用一个不存在的静态方法是调用。</p>
<p>__toString() 把对象转换成字符串的时候会调用。比如 echo。</p>
<p>__invoke() 当尝试把对象当方法调用时调用。</p>
<p>__set_state() 当使用var_export()函数时候调用。接受一个数组参数。</p>
<p>__clone() 当使用clone复制一个对象时候调用。</p>
</blockquote>
<p><strong>19. $this和self、parent这三个关键词分别代表什么？在哪些场合下使用？</strong></p>
<blockquote>
<p>$this 当前对象</p>
<p>self 当前类</p>
<p>parent 当前类的父类</p>
<p>$this在当前类中使用,使用-&gt;调用属性和方法。</p>
<p>self也在当前类中使用，不过需要使用::调用。</p>
<p>parent在类中使用。</p>
</blockquote>
<p><strong>20. 类中如何定义常量、如何类中调用常量、如何在类外调用常量。</strong></p>
<blockquote>
<p>类中的常量也就是成员常量，常量就是不会改变的量，是一个恒值。</p>
<p>定义常量使用关键字const.</p>
<p>例如：const PI = 3.1415326;</p>
<p>无论是类内还是类外，常量的访问和变量是不一样的，常量不需要实例化对象，</p>
<p>访问常量的格式都是类名加作用域操作符号（双冒号）来调用。</p>
<p>即：类名 :: 类常量名;</p>
</blockquote>
<h3 id="MySQL类型题"><a href="#MySQL类型题" class="headerlink" title="MySQL类型题"></a>MySQL类型题</h3><p><strong>1. 请写出数据类型(int char varchar datetime text)的意思；请问 varchar 和 char有什么区别？</strong></p>
<blockquote>
<p>int：整数。char：定长字符。varchar：变长字符。datetime：时间日期。text：文本。<br>varchar与char的区别：char是固定长度的字符串，分配多少空间就会占用多少空间。varchar是可以变长度的字符串，内容又多大就占用多大空间，能有效节省空间。由于varchar类型是可变的，所以在数据长度进行改变时，服务器要进行额外的操作，所以效率回避char低。</p>
</blockquote>
<p><strong>2. MyISAM 和 InnoDB 的基本区别？索引结构如何实现？</strong></p>
<blockquote>
<p>myisam类型不支持事务，表锁，容易产生碎片，要经常优化，读写速度快，innodb支持事务，行锁，有崩溃修复能力。读写速度慢。<br>创建索引语句：alert table 表名 add index(‘字段名称’) ;</p>
</blockquote>
<p><strong>3. mysql_fetch_row()和mysql_fetch_array()的区别</strong></p>
<blockquote>
<p>mysql_fetch_row()以索引数组的方式取查询结果集，mysql_fetch_array()以索引数组和关联数组两种方式取查询结果集。</p>
</blockquote>
<p><strong>4. sql语句应该考虑哪些安全性</strong></p>
<blockquote>
<p>防止sql注入，对特殊字符进行转义，过滤或者使用预编译sql语句绑定。<br>使用最小权限原则，特别注意不要使用root用户权限，为不同操作建立不同权限的用户。<br>当sql报错时，不要返回客户端，可写入log中查看。</p>
</blockquote>
<p><strong>5. 优化mysql 数据库方法</strong></p>
<blockquote>
<p>选择适当的字段类型，尽量把字段设置为NOTNULL。<br>使用连接（JOIN）来代替子查询(Sub-Queries)。<br>使用联合（UNION）查询代替手动创建临时表。<br>尽量减少使用（LIKE）关键字和通配符。<br>使用事务和外健。</p>
</blockquote>
<p><strong>6. 什么是数据库索引，主键索引和唯一索引的区别，索引的缺点是什么</strong></p>
<blockquote>
<p>索引是快速寻找那些有特定值的记录。<br>主键索引和唯一索引的区别：主键是一种唯一性索引，但他必须指定为PRIMARY KEY，并且每个表中只能有一个主键。唯一索引的所有值都只能出现一次，即必须唯一。<br>索引的缺点：<br> &nbsp; &nbsp; 创建索引和维护索引需要耗费时间，这种时间随着数据量的增加而增加。<br> &nbsp; &nbsp; 索引需要占用物理空间，除了数据表占据数据空间之外，每个索引还要占据一定的物理空间，如果要建立聚簇索引，需要的空间就会更大。<br> &nbsp; &nbsp; 当对表中的数据进行增删改的时候，索引也需动态维护，这样就降低了数据的维护速度。</p>
</blockquote>
<p><strong>7. 数据库中的事务是什么</strong></p>
<blockquote>
<p>事务是作为一个单元的一组有序的数据操作，具有原子性，一致性，隔离性，持久性。如果组中的操作都成功，则认为事务成功，即只有一个操作失败，则认定为事务操作失败。如果事务所有操作完成，事务提交，其修改将作用于所有其他数据库进程。如果有一个操作失败，事务将回滚，该事务所有操作的影响都会被取消。</p>
</blockquote>
<p><strong>8. 解释左连接，右连接，内连接，全连接</strong></p>
<blockquote>
<p>内连接仅选出两张表中相互匹配的数据记录，因此会导致有时我们需要的记录没有被包含进来。内连接是两个表中都必须有连接字段对应值的记录，数据才能被检索出来。<br>左连接和右连接都是外部连接，也就是区别于内连接，它对不满足连接条件的行并不是像内连接一样将数据完全过滤掉，而是保留一部分数据，数据行数不会减少。<br>左连接是只要左边表中有记录，数据就能被检索出来，而右边有的记录必须在左边表中有记录才会被检索出来，右连接则相反。<br>全连接则会返回两个表中所有的数据记录。</p>
</blockquote>
<p><strong>9. MySQL有哪些存储引擎</strong></p>
<blockquote>
<p>myisam，innodb，bdb，merge，memory，csv，maxdb。</p>
</blockquote>
<p><strong>10. 什么是锁？</strong></p>
<blockquote>
<p>基本锁类型：锁包括行级锁和表级锁</p>
<p>数据库是一个多用户使用的共享资源。当多个用户并发地存取数据时，在数据库中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。</p>
<p>加锁是实现数据库并发控制的一个非常重要的技术。当事务在对某个数据对象进行操作前，先向系统发出请求，对其加锁。加锁后事务就对该数据对象有了一定的控制，在该事务释放锁之前，其他的事务不能对此数据对象进行更新操作。</p>
</blockquote>
<p><strong>11. 什么叫视图？游标是什么？</strong></p>
<blockquote>
<p>视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，视图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询。</p>
<p>游标：是对查询出来的结果集作为一个单元来有效的处理。游标可以定在该单元中的特定行，从结果集的当前行检索一行或多行。可以对结果集当前行做修改。一般不使用游标，但是需要逐条处理数据的时候，游标显得十分重要。</p>
</blockquote>
<p><strong>12. 什么是存储过程？用什么来调用？</strong></p>
<blockquote>
<p>存储过程是一个预编译的SQL语句，优点是允许模块化的设计，就是说只需创建一次，以后在该程序中就可以调用多次。如果某次操作需要执行多次SQL，使用存储过程比单纯SQL语句执行要快。可以用一个命令对象来调用存储过程。</p>
</blockquote>
<p><strong>13. 如何通俗地理解三个范式？</strong></p>
<blockquote>
<p>第一范式：1NF是对属性的原子性约束，要求属性具有原子性，不可再分解；</p>
<p>第二范式：2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性;</p>
<p>第三范式：3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余。</p>
</blockquote>
<p><strong>14. 说说对SQL语句优化有哪些方法？</strong></p>
<blockquote>
<p>Where子句中：where表之间的连接必须写在其他Where条件之前，那些可以过滤掉最大数量记录的条件必须写在Where子句的末尾.HAVING最后。</p>
<p>用EXISTS替代IN、用NOT EXISTS替代NOT IN。</p>
<p>避免在索引列上使用计算</p>
<p>避免在索引列上使用IS NULL和IS NOT NULL</p>
<p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>
<p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描</p>
<p>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描</p>
</blockquote>
<p><strong>14. SQL语句中‘相关子查询’与‘非相关子查询’有什么区别？</strong></p>
<blockquote>
<p>非相关子查询是独立于外部查询的子查询，子查询总共执行一次，执行完毕后将值传递给外部查询。</p>
<p>相关子查询的执行依赖于外部查询的数据，外部查询执行一行，子查询就执行一次。</p>
<p>因此非相关子查询比相关子查询效率高</p>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用记录(七):常用命令整理</title>
    <url>/posts/fb20.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>Hexo博客系列基本也就搭建成功了，这里整理一下在后面使用中需要经常使用到的命令。</p>
<h2 id="Hexo命令："><a href="#Hexo命令：" class="headerlink" title="Hexo命令："></a>Hexo命令：</h2><p>更全的命令详解请移步<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">官方文档</a>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new post &#39;文章&#39;	# 新建一个名为&#39;文章&#39;的文章 ，其中post可省略。</span><br><span class="line">hexo new page &quot;about&quot;	# 新建一个&#39;about&#39;的页面</span><br><span class="line">hexo publish post &#39;文章&#39;	# 新建一个名为&#39;文章&#39;的文章草稿 ，其中post可省略。</span><br><span class="line">hexo publish page &#39;about&#39;	# 新建一个&#39;about&#39;的页面草稿</span><br><span class="line">hexo --draft	# 显示 source&#x2F;_drafts 文件夹中的草稿文章</span><br><span class="line">hexo generate	# 生成静态文件 简介 hexo g</span><br><span class="line">hexo server		# 启动服务器。默认情况下，访问网址为： http:&#x2F;&#x2F;localhost:4000&#x2F;，简写 hexo s</span><br><span class="line">hexo deploy		# 部署网站到线上，简写 hexo d</span><br><span class="line">hexo clean		# 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">hexo version	# 显示 Hexo 版本，简写hexo v</span><br></pre></td></tr></table></figure>

<h2 id="Git命令："><a href="#Git命令：" class="headerlink" title="Git命令："></a>Git命令：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;OldManXie&#x2F;OldManXie.github.io.git	# 克隆仓库默认分支文件</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;OldManXie&#x2F;OldManXie.github.io.git --branch blog	# 克隆仓库blog分支</span><br><span class="line">git add -A	# 将工作区的所有的修改提交到暂存区</span><br><span class="line">git commit -m &#39;XXX&#39;	# 将暂存区的修改提交到当前分支并设置备注为XXX</span><br><span class="line">git push # 将本地代码更新到远程默认分支上</span><br><span class="line">git push origin master	# 推送到master分支</span><br><span class="line">git pull # 从远程默认分支更新代码</span><br><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;OldManXie&#x2F;OldManXie.github.io.git	# 关联远程仓库</span><br><span class="line">git stash # 保存某次修改</span><br><span class="line">git reflog # 查看历史命令</span><br><span class="line">git status # 查看当前仓库的状态</span><br><span class="line">git diff # 查看修改</span><br><span class="line">git log # 查看提交历史</span><br><span class="line">git revert # 回退某个修改</span><br><span class="line">git reset # 回退到某一个版本</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用记录(六):备份及更换电脑操作</title>
    <url>/posts/3c8a.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这是我在搭建博客稍微了解了一点Hexo的时候就考虑的问题。因为Hexo是在本地编写文章，然后通过公式生成静态文件再发布。虽然配置了一个站点不是很麻烦，但是我也不想搭建维护了一段时间的博客就因为电脑突然坏掉，从而导致博客也不能使用。所以我们需要进行备份源码，这个备份可以用svn，git，cvs或手动打包备份等等等等，怎么选择看你自己，但是我相信对于大部分人来说毫无疑问的会用git，我这里也是针对于git备份做一个记录。</p>
<h2 id="备份："><a href="#备份：" class="headerlink" title="备份："></a>备份：</h2><p>在任意位置克隆GitHub上的Hexo项目到本地，clone后换成自己的项目地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;OldManXie&#x2F;OldManXie.github.io.git</span><br></pre></td></tr></table></figure>

<p>在Clone下来的文件夹中会有.git隐藏文件夹，复制.git文件夹到本地源码项目中，如果看不到.git文件夹，请点击工具栏中的查看，点击隐藏的项目（win10操作系统），其他系统如不会请百度“如何查看隐藏文件”。</p>
<p>在源码项目中应该是有一个.gitignore文件，如果没有需自己手动创建，此文件作用是在提交时要忽略的文件，默认内容如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure>

<p><span style='color:red'><strong>在操作前注意在\themes下的主题文件中是否已有.git文件，如有请删除，否则此主题文件会提交失败。</strong></span></p>
<p>在GitHub上创建分支，可登录至GitHub上手动创建，或在Git Bash中使用命令创建，下面命令是创建一个hexo分支并切换至此分支，名字随意。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure>

<p>依次执行下面命令，添加所有文件至缓冲区，提交，推送hexo分支的文件到github仓库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add --all</span><br><span class="line">git commit -m &quot;注释内容&quot;</span><br><span class="line">git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure>

<h2 id="更换电脑操作："><a href="#更换电脑操作：" class="headerlink" title="更换电脑操作："></a>更换电脑操作：</h2><p>在新电脑安装配置Hexo，如不会请翻阅Hexo系列第一篇文章，在配置好后需克隆备份分支至本地，下面命令中的分支名称及项目地址需切换至自己相应的地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone -b hexo https:&#x2F;&#x2F;github.com&#x2F;OldManXie&#x2F;OldManXie.github.io.git</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用记录(五):更换Next主题及优化</title>
    <url>/posts/61e56c7e.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这里只整理出我使用到的官网没给出的配置，具体配置及插件可参考 <a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">主题文档地址</a>  ，<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">插件地址</a>。</p>
<h2 id="安装主题："><a href="#安装主题：" class="headerlink" title="安装主题："></a>安装主题：</h2><p>进入本地网站根目录，打开Git Base窗口，输入下面命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>clone完成后，打开根目录下的themes文件夹，找到刚刚下载的next主题，复制文件夹名称，再打开站点配置文件，搜索theme字段并把后面的值改为你刚刚复制的文件夹名称，默认应该是next。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Extensions</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Plugins: https://hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Themes: https://hexo.io/themes/</span></span></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p>然后hexo s启动服务，打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>  成功与否自己看。</p>
<h2 id="配置主题："><a href="#配置主题：" class="headerlink" title="配置主题："></a>配置主题：</h2><p>配置文件在根目录下/themes/next/_config.yml，注意与站点配置文件不同。</p>
<p>我大概用到的有整合标签页面到侧边栏，代码块复制功能，文章加密，搜索，去除底部由 Hexo 强力驱动，网易云外链整理，url优化，大概效果如下。</p>
<p><img src="/uploads/image-20200403172046572.png" alt="image-20200403172046572"></p>
<h3 id="网易云及标签"><a href="#网易云及标签" class="headerlink" title="网易云及标签"></a>网易云及标签</h3><p>整合标签及网易云到侧边栏需修改\themes\next\layout_macro\sidebar.swig文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--网易云音乐播放--&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;sidebar-inner&quot;  style&#x3D;&quot;height: 130px;&quot;&gt;</span><br><span class="line">    &#123;% if theme.background_music %&#125;</span><br><span class="line">                 &lt;div&gt;</span><br><span class="line">                    &lt;iframe frameborder&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; marginwidth&#x3D;&quot;0&quot; marginheight&#x3D;&quot;0&quot; width&#x3D;&quot;210&quot; height&#x3D;&quot;110&quot; src&#x3D;&quot;&#123;&#123; theme.background_music &#125;&#125;&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">                 &lt;&#x2F;div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!--标签页--&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;sidebar-inner&quot; style&#x3D;&quot;margin-top:10px;margin-bottom: 20px;&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;tag-cloud-title&quot; type&gt;</span><br><span class="line">        &#123;&#123; _p(&#39;counter.tag_cloud&#39;, site.tags.length) &#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;tag-cloud-tags&quot;&gt;</span><br><span class="line">        &#123;&#123; tagcloud(&#123;min_font: 12, max_font: 30, amount: 300, color: true, start_color: &#39;#000000&#39;, end_color: &#39;#111&#39;&#125;) &#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>把上面的代码加到sidebar.swig文件中的以下位置。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">id</span>=<span class="string">"sidebar"</span> <span class="attr">class</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">&#123;% if theme.sidebar.onmobile %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sidebar-dimmer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>  <span class="comment">&lt;!--加一层div--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将上面的代码放在这层div的最顶部--&gt;</span></span><br><span class="line">        ----</span><br><span class="line">        ----</span><br><span class="line">        ----</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!--end--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>获取到网易云外链，不会的自行百度，然后复制外链//后的内容，添加到_config.yml主题配置文件中，格式如下，位置任意。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#网易云音乐</span><br><span class="line">background_music: &#x2F;&#x2F;music.163.com&#x2F;outchain&#x2F;player?type&#x3D;2&amp;id&#x3D;559829400&amp;auto&#x3D;1&amp;height&#x3D;66</span><br></pre></td></tr></table></figure>

<h3 id="代码块复制功能"><a href="#代码块复制功能" class="headerlink" title="代码块复制功能"></a>代码块复制功能</h3><p>三方插件 clipboardjs ，相关介绍和兼容性我就不赘述了，去它<a href="https://clipboardjs.com/" target="_blank" rel="noopener">主页</a>或<a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="noopener">github</a>上看。</p>
<p>下载地址 ：<a href="https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.min.js" target="_blank" rel="noopener">clipboard.min.js</a>  或  <a href="https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.js" target="_blank" rel="noopener">clipboard.js</a></p>
<p>保存文件clipboard.js 或 clipboard.min.js到目录如下：\themes\next\source\js\src，并在此文件夹下创建clipboard-use.js，文件内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*页面载入完成后，创建复制按钮*/</span></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123; </span><br><span class="line">  <span class="comment">/* code */</span></span><br><span class="line">  <span class="keyword">var</span> initCopyCode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> copyHtml = <span class="string">''</span>;</span><br><span class="line">    copyHtml += <span class="string">'&lt;button class="btn-copy" data-clipboard-snippet=""&gt;'</span>;</span><br><span class="line">    copyHtml += <span class="string">'  &lt;i class="fa fa-globe"&gt;&lt;/i&gt;&lt;span&gt;copy&lt;/span&gt;'</span>;</span><br><span class="line">    copyHtml += <span class="string">'&lt;/button&gt;'</span>;</span><br><span class="line">    $(<span class="string">".highlight .code pre"</span>).before(copyHtml);</span><br><span class="line">    <span class="keyword">new</span> ClipboardJS(<span class="string">'.btn-copy'</span>, &#123;</span><br><span class="line">        target: <span class="function"><span class="keyword">function</span>(<span class="params">trigger</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> trigger.nextElementSibling;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  initCopyCode();</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<p>在\themes\next\source\css_custom\custom.styl样式文件中添加下面代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//代码块复制按钮</span><br><span class="line"><span class="selector-class">.highlight</span>&#123;</span><br><span class="line">  //方便copy代码按钮（btn-copy）的定位</span><br><span class="line">  <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-copy</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(#fcfcfc,#eee);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d5d5d5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">    <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">-o-transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-copy</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.btn-copy</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改\themes\next\layout_layout.swig文件中，添加引用（注：在 swig 末尾或 body 结束标签（``）之前添加）：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&lt;!-- 代码块复制功能 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/clipboard.min.js"</span>&gt;&lt;/script&gt;  </span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/clipboard-use.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="文章加密插件"><a href="#文章加密插件" class="headerlink" title="文章加密插件"></a>文章加密插件</h3><p>进入根目录，打开Git Bash输入下面的命令，安装插件，注意此插件会使本文章的复制代码功能失效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<p>安装成功后，在站点配置文件(_config.yml)中任意位置加入以下配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    default_abstract: 是该博客的摘要，会显示在博客的列表页</span><br><span class="line">    default_message: 这个是博客查看时，密码输入框上面的描述性文字</span><br></pre></td></tr></table></figure>

<p>然后在你的文章的头部添加上对应的字段，如 password, abstract, message</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: &#39;文章加密&#39;</span><br><span class="line">categories:</span><br><span class="line">  - Other</span><br><span class="line">tags:</span><br><span class="line">  - Hexo</span><br><span class="line">  - Next</span><br><span class="line">abbrlink: 61e56c7e</span><br><span class="line">date: 2020-04-03 14:38:40</span><br><span class="line">keywords: 博客文章密码</span><br><span class="line">password: TloveY</span><br><span class="line">abstract: 是该博客的摘要，会显示在博客的列表页</span><br><span class="line">message: 这个是博客查看时，密码输入框上面的描述性文字</span><br></pre></td></tr></table></figure>

<p>注意在文章头部添加的message和abstract会覆盖站点配置文件中的内容。</p>
<h3 id="搜索插件"><a href="#搜索插件" class="headerlink" title="搜索插件"></a>搜索插件</h3><p>进入根目录，打开Git Bash输入下面的命令，安装插件。安装之后，会在站点目录的 public 文件夹下创建一个 search.xml 文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>

<p>安装成功后，在站点配置文件(_config.yml)中任意位置加入以下配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Search </span><br><span class="line">search:</span><br><span class="line">  path: search.xml # 索引文件的路径，相对于站点根目录</span><br><span class="line">  field: post	# 搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000	# 限制搜索的条目数</span><br></pre></td></tr></table></figure>

<h3 id="去除底部由-Hexo-强力驱动"><a href="#去除底部由-Hexo-强力驱动" class="headerlink" title="去除底部由 Hexo 强力驱动"></a>去除底部由 Hexo 强力驱动</h3><p>修改\themes\next\layout_partials\footer.swig文件，用<!--注释内容-->去测试该把哪里注释掉。</p>
<h3 id="Url优化插件"><a href="#Url优化插件" class="headerlink" title="Url优化插件"></a>Url优化插件</h3><p>进入根目录，打开Git Bash输入下面的命令，安装abbrlink插件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>安装成功后，在站点配置文件(_config.yml)中搜索permalink定位，加入以下配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">permalink: posts&#x2F;:abbrlink.html</span><br><span class="line">permalink_defaults:</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc16   #算法： crc16(default) and crc32</span><br><span class="line">  rep: hex     #进制： dec(default) and hex</span><br></pre></td></tr></table></figure>

<p>crc16的最大帖子数是65535，生成的链接如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https:&#x2F;&#x2F;www.sbblog.top&#x2F;posts&#x2F;66c8.html</span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https:&#x2F;&#x2F;www.sbblog.top&#x2F;posts&#x2F;65535.html</span><br><span class="line">crc32 &amp; hex</span><br><span class="line">https:&#x2F;&#x2F;www.sbblog.top&#x2F;posts&#x2F;8ddf18fb.html</span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https:&#x2F;&#x2F;www.sbblog.top&#x2F;posts&#x2F;1690090958.html</span><br></pre></td></tr></table></figure>

<p>此插件会在你新建文章的时候在头部生成一个abbrlink，这个是唯一的，请不要删除或修改。</p>
<p>此外还要配置标签和分类的url，如果你能保证你的标签全是简短的英文，不配置也可以。</p>
<p>在站点配置文件(_config.yml)中搜索Category &amp; Tag定位，配置形式如下，之后再文章头部写相应的中文就可以。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map: #分类别名</span><br><span class="line">  SEO技术: seo</span><br><span class="line">  娱乐放松: play</span><br><span class="line"></span><br><span class="line">tag_map: #标签别名</span><br><span class="line">  chrome插件: chrome-extensions</span><br><span class="line">  typecho评论验证: typecho-comm</span><br></pre></td></tr></table></figure>

<h3 id="公益404页面"><a href="#公益404页面" class="headerlink" title="公益404页面"></a>公益404页面</h3><p>因为使用公益404插件有点小问题，所有我是在/source下新建404.html，加入以下代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>公益404<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"你的url地址"</span> <span class="attr">homePageName</span>=<span class="string">"回到我的主页"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="分享按钮"><a href="#分享按钮" class="headerlink" title="分享按钮"></a>分享按钮</h3><p>详情请查看<a href="https://github.com/revir/need-more-share2" target="_blank" rel="noopener">官方文档</a> ，下载<a href="https://oldmanxie.github.io/js/needsharebutton.min.js" target="_blank" rel="noopener">needsharebutton.min.js</a>和<a href="https://oldmanxie.github.io/css/needsharebutton.min.css" target="_blank" rel="noopener">needsharebutton.min.css</a>，保存位置随意，注意代码中的路径要和保存的位置相符合，我这里是在source文件夹下分别新建了css和js文件夹并将上述文件放入相应的文件夹，修改\themes\next\layout_macro\post.swig文件，把下面代码放入你认为合适的地方，我的是在在END POST BODY的第一个endif前，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- needsharebutton Javascript file --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/needsharebutton.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- needsharebutton CSS file --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/css/needsharebutton.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span>  <span class="attr">class</span>=<span class="string">"btn btn-default need-share-button"</span>&gt;</span>Share<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文章更新时间"><a href="#文章更新时间" class="headerlink" title="文章更新时间"></a>文章更新时间</h3><p>修改（博客主题目录）主题配置文件，_config.yml文件，找到updated_at并把值改为true，然后在Front-matter（文章页头部）添加 updated 参数 ，默认为文件的修改日期。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Post meta display settings</span><br><span class="line">post_meta:</span><br><span class="line">  item_text: true</span><br><span class="line">  created_at: true</span><br><span class="line">  updated_at: true</span><br><span class="line">  categories: true</span><br></pre></td></tr></table></figure>



<h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><p>因为我这也是第一次使用，什么留言，打赏什么的我认为没必要就没配置，而上面这些也只是简单的配置了一下，建议多看看<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">官方文档</a> ，里面有很多比较好的插件，也许就适合你的博客呢。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用记录(四):站点配置详解</title>
    <url>/posts/64001171.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>Hexo版本：4.2.0，还需注意在Hexo中空格是非常严格的，不要随便删除空格。</p>
<h2 id="站点配置："><a href="#站点配置：" class="headerlink" title="站点配置："></a>站点配置：</h2><p>根目录下的_config.yml文件便是你的站点配置文件，基本内容如下，详情参见 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官方文档</a> 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Hexo Configuration</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Docs: https://hexo.io/docs/configuration.html</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Source: https://github.com/hexojs/hexo/</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Site</span></span><br><span class="line">title: Hexo          # 网站的标题，可能用在各种布局的页面中</span><br><span class="line">subtitle:            # 网站子标题</span><br><span class="line">description:         # 网站的描述性</span><br><span class="line">keywords:            # 网站的关键字</span><br><span class="line">author: John Doe     # 网站的作者</span><br><span class="line">language:            # 网站采用语言，要跟/theme/***/languages/**.yml下的文件名对应。</span><br><span class="line">timezone:            # 网站的时区</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> URL</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span></span><br><span class="line">url: http://yoursite.com 			# 网站的url，如果不在域名根目录，应包含子目录，且root要设置为`/子目录/`</span><br><span class="line">root: / 						   # 网站的根目录</span><br><span class="line">permalink: :year/:month/:day/:title/ # 文章永久链接的形成模版。每一篇文章都有唯一的url。</span><br><span class="line">permalink_defaults:					# 文章永久链接中，各部分的默认值。</span><br><span class="line">pretty_urls:						# url后缀优化</span><br><span class="line">  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing '.html' from permalinks</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Directory</span></span><br><span class="line">source_dir: source          # 网站中源文件（比如Markdown啊什么的所在的文件夹）</span><br><span class="line">public_dir: public          # 生成的静态网站的目录</span><br><span class="line">tag_dir: tags               # 标签页所在的文件夹。</span><br><span class="line">archive_dir: archives       # 文档页所在的文件夹</span><br><span class="line">category_dir: categories    # 类别的所在的文件夹</span><br><span class="line">code_dir: downloads/code    # 代码的所在的文件夹</span><br><span class="line">i18n_dir: :lang             # 国际语言所在的文件夹</span><br><span class="line">skip_render:                # 忽略文档清单</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Writing</span></span><br><span class="line">new_post_name: :title.md	# 默认新建文档名</span><br><span class="line">default_layout: post	# 新建文档的默认布局</span><br><span class="line">titlecase: false	# 是否要把标题中的首字符大写</span><br><span class="line">external_link:				</span><br><span class="line">  enable: true	# 在新选项卡中打开外部链接</span><br><span class="line">  field: site	# 适用于整个站点</span><br><span class="line">  exclude: ''	# 排除''之外</span><br><span class="line">filename_case: 0	# 文件名是否小写敏感</span><br><span class="line">render_drafts: false	# 是否渲染草稿</span><br><span class="line">post_asset_folder: false	# 是否启用资源文件夹。如启用，新建文档同时建立同名的资源文件夹</span><br><span class="line">relative_link: false	# 是否把站内资源的链接改为站内相对链接。建议关闭。</span><br><span class="line">future: true	# 文档中指定为未来时间创建</span><br><span class="line">highlight:</span><br><span class="line">  enable: true	 # 是否开启代码高亮功能</span><br><span class="line">  line_number: true	 # 代码块中是否在前面加上行号</span><br><span class="line">  auto_detect: false	# 是否自动检测代码块的语言（比如xml、JavaScript、mermaid等）</span><br><span class="line">  tab_replace: ''	# 用什么字符来代替tab(`\t`)字符。</span><br><span class="line">  wrap: true	# 将代码块包装到&lt;table&gt;</span><br><span class="line">  hljs: false	# CSS类使用hljs-*前缀</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Home page setting</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> path: Root path <span class="keyword">for</span> your blogs index page. (default = <span class="string">''</span>)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> per_page: Posts displayed per page. (0 = <span class="built_in">disable</span> pagination)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line">index_generator:</span><br><span class="line">  path: ''	# 主页所在路径，默认为''</span><br><span class="line">  per_page: 10	 # 主页的索引页包含文章数量，如未定义，则采用根目录下的`per_page`值</span><br><span class="line">  order_by: -date	 # 文章（Post类型）排序属性，`-`为降序</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Category &amp; Tag</span></span><br><span class="line">default_category: uncategorized	# 对文档的默认分类</span><br><span class="line">category_map:	 # 对文档中的分类字段进行映射。建立分类文件夹时采用映射后的字符串</span><br><span class="line">tag_map:	# 对文档中的标签字段进行映射。建立标签文件夹时采用映射后的字符串</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Metadata elements</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span></span><br><span class="line">meta_generator: true #	Meta generator 标签。 值为 false 时 Hexo 不会在头部插入该标签</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Date / Time format</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Hexo uses Moment.js to parse and display date</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># You can customize the date format as defined in</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># http://momentjs.com/docs/#/displaying/format/</span></span></span><br><span class="line">date_format: YYYY-MM-DD	# 日期格式</span><br><span class="line">time_format: HH:mm:ss	# 时间格式</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Use post's date for updated date unless set in front-matter</span></span></span><br><span class="line">use_date_for_updated: false #启用以后，如果 Front Matter 中没有指定 updated， post.updated 将会使用 date 的值而不是文件的创建时间。在 Git 工作流中这个选项会很有用</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Pagination</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Set per_page to 0 to disable pagination</span></span></span><br><span class="line">per_page: 10	 # 主页/分类/标签/存档等类型索引页包含文章数量</span><br><span class="line">pagination_dir: page	# 分页所在文件夹</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Include / Exclude file(s)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># include:/exclude: options only apply to the 'source/' folder</span></span></span><br><span class="line">include:	# Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 . 开头的文件和文件夹，Hexo 的 _posts 和 _data 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。</span><br><span class="line">exclude:	# Hexo 会忽略这些文件和目录</span><br><span class="line">ignore:		# 忽略文件/文件夹</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Extensions</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Plugins: https://hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Themes: https://hexo.io/themes/</span></span></span><br><span class="line">theme: landscape	 # 默认主题landscape</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Deployment</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span></span><br><span class="line">deploy:	  # 定义部署</span><br><span class="line">  type: ''</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用记录(三):GitHub项目同步更新至指定服务器</title>
    <url>/posts/93941216.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>如果我们需要把项目部署到自己的服务器上面，那么在使用GitHub的时候，每次push代码后，要手动到服务器上git putt一下。为了省时省力我们可以编写一个脚本实现自动部署。使用GitHub上的webhook功能就能实现此功能。</p>
<p>我的服务器是CentOS7.6，Php是7.2，如不需要部署，则可直接进行下一篇文章。</p>
<h2 id="配置ssh-key："><a href="#配置ssh-key：" class="headerlink" title="配置ssh key："></a>配置ssh key：</h2><p>执行<code>ssh-keygen</code>，一路回车就可以，之后在/home/www/.ssh/hui会生成id_rsa和id_rsa.pud两个文件，<code>cat id_rsa.pud</code> 查看id_rsa.pud文件内容并复制。</p>
<p>登录至GitHub，依次点击Settings，SSH and GPG keys，New SSh Key。将复制的内容添加到 Key 中， Title 可以自己随意设定，最后点击 Add SSH Key。回到服务器shell界面，输入 <code>ssh -T git@github.com</code> 验证是否添加成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi OldManXie! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<h2 id="配置Webhook："><a href="#配置Webhook：" class="headerlink" title="配置Webhook："></a>配置Webhook：</h2><p>登录到GitHub，进入你的仓库，依次点击Settings，Webhook。</p>
<p>填写Payload URL，这是即将编写的脚本所放的地方，必须要在公网可以访问。</p>
<p>Content type,数据类型，选择你所熟悉的，我这里选择的是application/json格式。</p>
<p>Secret，这个是密码，为了安全起见，有必要填写一下，当然你就不想写也是可以的。</p>
<p>Which events would you like to trigger this webhook?，触发事件，我选择Just the push event.只是push的时候触发。</p>
<p>然后点击添加就可以了。</p>
<p><img src="/uploads/image-20200403112741342.png" alt="image-20200403112741342"></p>
<h2 id="编写Php脚本："><a href="#编写Php脚本：" class="headerlink" title="编写Php脚本："></a>编写Php脚本：</h2><p>这个脚本用什么语言写都是一样的，因为我熟悉并且服务器搭建的就是Php，所以就用Php了,因为7.0不支持$HTTP_RAW_POST_DATA了,所以选择相应的版本。</p>
<p>Php &gt; 7.0脚本如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//需要和你在Github上填写的secret一致</span></span><br><span class="line">$secret = <span class="string">""</span>;</span><br><span class="line"><span class="comment">// 需要同步的项目路径</span></span><br><span class="line">$path = </span><br><span class="line">$signature = $_SERVER[<span class="string">'HTTP_X_HUB_SIGNATURE'</span>];</span><br><span class="line"><span class="keyword">if</span> ($signature) &#123;</span><br><span class="line">  $hash = <span class="string">"sha1="</span>.hash_hmac(<span class="string">'sha1'</span>, file_get_contents(<span class="string">"php://input"</span>), $secret);</span><br><span class="line">  <span class="keyword">if</span> (strcmp($signature, $hash) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//shell_exec 执行shell命令，2&gt;&amp;1用于标准错误重定向到标准输出，也就是脚本执行错误时也能返回错误信</span></span><br><span class="line">    <span class="keyword">echo</span> shell_exec(<span class="string">"cd &#123;$path&#125; &amp;&amp; /usr/bin/git reset --hard origin/master &amp;&amp; /usr/bin/git clean -f &amp;&amp; /usr/bin/git pull 2&gt;&amp;1"</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">http_response_code(<span class="number">404</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>Php &lt; 7.0脚本如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//需要和你在Github上填写的secret一致</span></span><br><span class="line">$secret = <span class="string">""</span>;</span><br><span class="line"><span class="comment">// 需要同步的项目路径</span></span><br><span class="line">$path = <span class="string">""</span>;</span><br><span class="line">$signature = $_SERVER[<span class="string">'HTTP_X_HUB_SIGNATURE'</span>];</span><br><span class="line"><span class="keyword">if</span> ($signature) &#123;</span><br><span class="line">  $hash = <span class="string">"sha1="</span>.hash_hmac(<span class="string">'sha1'</span>, $HTTP_RAW_POST_DATA, $secret);</span><br><span class="line">  <span class="keyword">if</span> (strcmp($signature, $hash) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//shell_exec执行shell命令，2&gt;&amp;1用于标准错误重定向到标准输出，也就是脚本执行错误时也能返回错误信息</span></span><br><span class="line">    <span class="keyword">echo</span> shell_exec(<span class="string">"cd &#123;$path&#125; &amp;&amp; /usr/bin/git reset --hard origin/master &amp;&amp; /usr/bin/git clean -f &amp;&amp; /usr/bin/git pull 2&gt;&amp;1"</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">http_response_code(<span class="number">404</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>把你的脚本放在之前GItHub上面配置的地方即可。</p>
<h2 id="服务器配置："><a href="#服务器配置：" class="headerlink" title="服务器配置："></a>服务器配置：</h2><p>进入到我们想要存放项目的目录后，GIt初始化，然后添加远程仓库映射，指定想要pull的远程分支，指定默认主机。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir hexo.sbblog.top &#x2F;&#x2F;创建文件夹</span><br><span class="line">$ cd hexo.sbblog.top &#x2F;&#x2F;进入文件夹</span><br><span class="line">$ git init &#x2F;&#x2F;初始化Git</span><br><span class="line">$ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;OldManXie&#x2F;OldManXie.github.io.git &#x2F;&#x2F;远程仓库映射</span><br><span class="line">$ git push -u origin master &#x2F;&#x2F;指定默认主机，验证身份信息,不指定的话每次pull都要指定分支，很麻烦</span><br><span class="line">$ chmod -R 777 .git&#x2F;  &#x2F;&#x2F;给用户Git权限</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用记录(二):部署项目至GitHub</title>
    <url>/posts/60b64ed3.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>我们搭建博客肯定是为了记录一些属于自己的东西并让人们在网络上可以发现并浏览，那么我们就需要把我们写的东西放在一个可以被公共访问的地方，那么我这里暂时用的是免费的GitHub，当然后面也可以整合到自己的服务器上面。</p>
<h2 id="GitHub配置："><a href="#GitHub配置：" class="headerlink" title="GitHub配置："></a>GitHub配置：</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。</p>
<h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>登陆 <a href="https://github.com/" target="_blank" rel="noopener">GitHub官网</a>，没有账号的自行注册，注册过程就不赘述了，在拥有GitHub的账号后再本地Bash窗口输入下面命令，注意要将 your_name 和 your_email 替换成自己的信息。</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name your_name</span><br><span class="line">git config --global user.email your_email</span><br></pre></td></tr></table></figure>

<h3 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h3><p>打开 GitHub 官网的个人首页，点击 New repository 新建仓库，并按以下说明填写仓库信息，Repository name 的格式为 your_name.github.io，其中，your_name是自己的 GitHub 名称，填写完后点击Create repository，创建仓库，这就便生成一个为 <a href="https://your_name.github.io" target="_blank" rel="noopener">https://your_name.github.io</a> 的网址。</p>
<p><img src="/uploads/image-20200402154638161.png" alt="image-20200402154638161"></p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>进入站点根文件夹，打开 Bash 输入 <code>npm install hexo-deployer-git --save</code> 命令安装插件。</p>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>打开根文件夹下的 <code>_config.yml</code> 配置文件，进行如下配置，注意your_name要换成你自己的名称。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;your_name&#x2F;OldManXie.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h3 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h3><p>进入站点根文件夹，打开Bash，输入 <code>ssh-keygen -t rsa -C &quot;your_email&quot;</code> 命令并一路回车获得密钥，注意将 your_email 替换成自己的邮箱。完成后，根据提示信息中的文件地址 <code>/c/Users/user/.ssh/id_rsa.pub</code> 找到 id_rsa.pub 文件，并复制文件里面的内容。</p>
<p>登录 GitHub，依次点击Settings，SSH and GPG keys，New SSh Key。</p>
<p><img src="/uploads/image-20200402161130041.png" alt="image-20200402161130041"></p>
<p>将复制的内容添加到 Key 中， Title 可以自己随意设定，最后点击  Add SSH Key。</p>
<p><img src="/uploads/image-20200402161358648.png" alt="image-20200402161358648"></p>
<p>回到站点根文件夹，打开 Bash，输入 <code>ssh -T git@github.com</code> 验证是否添加成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi OldManXie! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<h3 id="发布网址"><a href="#发布网址" class="headerlink" title="发布网址"></a>发布网址</h3><p>Bash 中输入命令 <code>hexo g</code> 生成静态文件，输入命令 <code>hexo d</code> 部署到 Github。打开 <a href="https://your_name.github.io" target="_blank" rel="noopener">https://your_name.github.io</a> 就可以看见已经部署好的网站了，大功告成！</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用记录(一):建站</title>
    <url>/posts/15c8b954.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>因为这是我第一次使用Hexo搭建我的个人blog，所以在此记录一下，后面所有的Hexo文章都是基于本博客基础上编写更新的，还需注意本文是基于Windows系统。</p>
<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a>，Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p> 可到<a href="https://git-scm.com/download" target="_blank" rel="noopener">Git官网</a>选择你想要的版本下载并安装。如果之前已经安装了git，可通过命令<code>git clone https://github.com/git/git</code>将更新到最新版本。</p>
<p>右击桌面空白部分，出现 Git Bash Here 选项证明安装成功。</p>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>下载并安装<a href="https://nodejs.org/dist/v12.16.1/node-v12.16.1-x64.msi" target="_blank" rel="noopener">12.16.1 LTS</a>，如版本不符，可到<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网</a>下载相应的版本。</p>
<p>右击桌面空白部分，点击 Git Bash Here ，输入 <code>node -v</code> 命令可查看 node 版本，输入 <code>npm -v</code> 命令可查看 npm 版本，可用来验证是否已安装成功。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>选择一个合适的位置创建一个文件夹，该文件夹将作为 Hexo 的根目录，用来储存本地文件。进入该文件夹打开 Git Bash Here窗口，输入命令 <code>hexo init</code> （始化为 Hexo 根目录）和 <code>npm install</code>（自动安装依赖）。</p>
<h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><p>如上面过程顺利完成，那么你的个人博客网站已经可以在本地上正常运行了，打开  Git Bash Here窗口，输入命令 <code>hexo s</code> 启动本地站点，出现下面内容证明安装成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">WARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">WARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ATTENTION! &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">WARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">WARN   NexT repository is moving here: https:&#x2F;&#x2F;github.com&#x2F;theme-next</span><br><span class="line">WARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">WARN   It&#39;s rebase to v6.0.0 and future maintenance will resume there</span><br><span class="line">WARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">INFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>打开浏览器输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 可访问本地博客，Ctrl+C可停止本地测试。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora使用教程</title>
    <url>/posts/4c2a.html</url>
    <content><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>官方介绍是Typora给你作为读者和作者的无缝体验。它删除了预览窗口、模式切换器、markdown源代码的语法符号和所有其他不必要的干扰。相反，它提供了一个真正的实时预览功能，帮助您专注于内容本身。</p>
<p>简单的讲就是一个能实现实时预览的简洁的markdown编辑器。</p>
<h2 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h2><p><a href="https://typora.io/" target="_blank" rel="noopener">官网地址</a>     <a href="https://typora.io/windows/typora-setup-x64.exe?" target="_blank" rel="noopener">Windows(64)</a>      <a href="https://typora.io/windows/typora-setup-ia32.exe?" target="_blank" rel="noopener">Windows(32)</a>     <a href="https://typora.io/download/Typora.dmg" target="_blank" rel="noopener">Mac</a></p>
<h2 id="常用快捷键："><a href="#常用快捷键：" class="headerlink" title="常用快捷键："></a>常用快捷键：</h2><p><strong>源代码模式:</strong>    Ctrl+’/‘</p>
<p><strong>标题:</strong>    Ctrl+数字键（1-6）</p>
<p><strong>下划线:</strong>    Ctrl+u </p>
<p><strong>删除线:</strong>    Alt+Shift+5</p>
<p><strong>字体加粗:</strong>    Ctrl+b</p>
<p><strong>字体倾斜:</strong>    Ctrl+i  </p>
<p><strong>无序列表:</strong>    ‘-‘+空格</p>
<p><strong>有序列表:</strong>    数字+’.’+空格</p>
<p><strong>表格:</strong>    Ctrl+t</p>
<p><strong>生成目录:</strong>    [Toc]+回车</p>
<p><strong>选中一行:</strong>    Ctrl+l</p>
<p><strong>选中词组:</strong>    Ctrl+d</p>
<p><strong>搜索:</strong>    Ctrl+f</p>
<p><strong>替换:</strong>    Ctrl+h</p>
<p><strong>引用:</strong>    ‘&gt;’+空格</p>
<p><strong>多行代码:</strong>    ‘```‘  (三个英文输入状态下的~键回车后选择代码语言)</p>
<p><strong>插入图片:</strong>    Ctrl+Shift+i （拖入上传也是一个不错的选择）</p>
<p><strong>插入链接:</strong>    Ctrl+k</p>
<p><strong>emoji:</strong>    ‘:’+字母</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>typecho</tag>
      </tags>
  </entry>
</search>
